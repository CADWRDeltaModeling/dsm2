#ifndef gate_pipe_device_STORAGE_H__
#define gate_pipe_device_STORAGE_H__
/**
WARNING: THIS FILE WAS AUTOMATICALLY GENERATED USING A SCRIPT AND A TEMPLATE  
DO NOT CHANGE THE CODE HERE. 
IF THE CODE IS INCORRECT, FIX THE TEMPLATE OR SCRIPT
IF YOU WANT TO ADD NEW ITEMS, ADD THEM TO THE SCRIPT INPUT FILE AND RUN IT AFRESH
*/ 
#define _CRT_SECURE_NO_DEPRECATE  // viz studio deprecation warnings
#include "hdf5.h"
#include "hdf5_hl.h"
#include "hdf_storage.h"
#include "HDFTableManager.h"
#include "TableDescription.h"
#include "TableItemFunctors.h"
#include "boost/tuple/tuple_comparison.hpp"
#include "boost/tuple/tuple_io.hpp"
#include<iostream>
#include<vector>
#include<algorithm>
#include<string.h>
#include<iostream>
#include "input_storage_gate.h"

using namespace std;
using namespace boost;

/** Structure representing input of type gate_pipe_device.
    This class is autogenerated by a script given
    a description of the object
    \ingroup userdata
*/
class gate_pipe_device
{
public:

  /** Data type gate_pipe_device, default constructor */  
  typedef const boost::tuple<const std::string,const std::string>  identifier_type;

  gate_pipe_device() :
    nduplicate(-901),
    radius(-901.0),
    elev(-901.0),
    cf_from_node(-901.0),
    cf_to_node(-901.0),
    used(true),
    layer(0)
  {
    fill_n(gate_name,32,'\0');
    fill_n(device,32,'\0');
    fill_n(default_op,16,'\0');
  };

  /** Construct a gate_pipe_device with actual data values */
  gate_pipe_device(const  char a_gate_name[32],const  char a_device[32],const int & a_nduplicate,const double & a_radius,const double & a_elev,const double & a_cf_from_node,const double & a_cf_to_node,const  char a_default_op[16], bool a_used=true, int a_layer = 0) :
    nduplicate(a_nduplicate),
    radius(a_radius),
    elev(a_elev),
    cf_from_node(a_cf_from_node),
    cf_to_node(a_cf_to_node),
    used(a_used),
    layer(a_layer)
  {
    memcpy(gate_name,a_gate_name,32);
    memcpy(device,a_device,32);
    memcpy(default_op,a_default_op,16);  
  }
  
  /**Copy constructor) 
   */
  gate_pipe_device (const gate_pipe_device & other) :
    nduplicate(other.nduplicate),
    radius(other.radius),
    elev(other.elev),
    cf_from_node(other.cf_from_node),
    cf_to_node(other.cf_to_node),
    used(other.used),
    layer(other.layer)
  {
    memcpy(gate_name,other.gate_name,32);
    memcpy(device,other.device,32);
    memcpy(default_op,other.default_op,16);  
  }
  
  /** Identifier that distinguishes whether two entries are distinct */
  identifier_type identifier()  const
  {  
     return identifier_type( gate_name,device );
  }
  
  void set_identifier(identifier_type identifier)
  {
     memcpy(gate_name,identifier.get<0>().c_str(),32);
      memcpy(device,identifier.get<1>().c_str(),32);
  }
  
  /** Parent object class name.
      If this is a child item belonging to a parent, returns
      the name of the parent class. Otherwise returns the name
      of this class.
  */
  gate::identifier_type parent_identifier()  const
  {
     return gate::identifier_type( gate_name );
  }

  /** Return the version/layer number of the parent object */ 
  int parent_version()  const
  {
    vector<gate>& pbuf = HDFTableManager<gate>::instance().buffer();
    gate parent;
    parent.set_identifier(parent_identifier());
    vector<gate>::iterator loc = lower_bound(pbuf.begin(),
                                                pbuf.end(),
                                                parent,
                                                identifier_compare<gate>());
    bool found = (loc!=pbuf.end()) && loc->identifier() == parent.identifier();    
    if (found && loc->used){ return loc->layer; }
    else{ return -1; }
  }

  /** Return true if this layer of this object matches the layer of the parent object that will be use in the model.*/
  bool parent_valid()  const
  {
    return this->layer == parent_version();
  }

  /** Less-than operator based on the identifier plus (for parent objects) layer number*/  
  bool operator< (const gate_pipe_device & other) const
  {
      return (this->identifier() < other.identifier());
  }

  /** Less-than operator based on the identifier plus (for parent objects) layer number*/  
  bool operator== (const gate_pipe_device & other) const
  {
     return ((*this < other ) || (other < *this)) ? false : true;
  }
  
  /** Assignment that includes all the data plus the used and layer fields */
  gate_pipe_device& operator=(const gate_pipe_device& rhs)
  {
    strcpy(this->gate_name,rhs.gate_name);
    strcpy(this->device,rhs.device);
    this->nduplicate=rhs.nduplicate;
    this->radius=rhs.radius;
    this->elev=rhs.elev;
    this->cf_from_node=rhs.cf_from_node;
    this->cf_to_node=rhs.cf_to_node;
    strcpy(this->default_op,rhs.default_op);
    used = rhs.used;
    layer = rhs.layer;
    return *this;
  }

  /** Return the class name of this object (gate_pipe_device) */
  string objectName() const
  { 
    return "gate_pipe_device"; 
  }

  
  char gate_name[32];
  char device[32];
  int nduplicate;
  double radius;
  double elev;
  double cf_from_node;
  double cf_to_node;
  char default_op[16];
  /** indicator that the entry is used (true if not marked deleted by user)*/
  bool used;  
  /** layer (version number) of this entry */
  int layer;
};

typedef HDFTableManager<gate_pipe_device> gate_pipe_device_table;

hid_t string_type(size_t n);

TableDescription gate_pipe_device_table_description();

istream& operator>> (istream& stream, gate_pipe_device & obj);
ostream& operator<<(ostream & stream, const gate_pipe_device & obj);



////////// FORTRAN-LINKABLE API //////////
#define FCALL extern "C"


/**
  Clear the buffer, compatible with fortran
*/  
FCALL void gate_pipe_device_clear_buffer_f();

/** query number of records being stored in buffer */
FCALL int gate_pipe_device_buffer_size_f();


/** append to buffer, compatible with fortran, returns new size*/
FCALL void gate_pipe_device_append_to_buffer_f(const  char a_gate_name[32],const  char a_device[32],const int * a_nduplicate,const double * a_radius,const double * a_elev,const double * a_cf_from_node,const double * a_cf_to_node,const  char a_default_op[16], int * ierror, 
              const int gate_name_len,const int device_len,const int default_op_len);
  
/** both makes the table and writes the contents of the buffer to it */
FCALL void gate_pipe_device_write_buffer_to_hdf5_f(const hid_t* file_id, int* ierror);

/** reads the table in from a file into the buffer*/
FCALL void gate_pipe_device_read_buffer_from_hdf5_f(const hid_t* file_id, int* ierror);

/** query size information about the table in hdf5
*/
FCALL void gate_pipe_device_number_rows_hdf5_f(const hid_t* file_id, hsize_t* nrecords, int* ierror);


/** get one row worth of information from the buffer */
FCALL void gate_pipe_device_query_from_buffer_f(size_t* row, 
                         char a_gate_name[32], char a_device[32],int * a_nduplicate,double * a_radius,double * a_elev,double * a_cf_from_node,double * a_cf_to_node, char a_default_op[16], int * ierror, 
              int gate_name_len,int device_len,int default_op_len);
/**
  prioritize buffer by layers, delete unused items and sort
  */
FCALL void gate_pipe_device_prioritize_buffer_f(int* ierror);
/**
   write buffer to the given text file. File will be appended if exists and append flag is set to true.
   otherwise the file will be created or overwritten.
 */
FCALL void gate_pipe_device_write_buffer_to_text_f(const char* file, const bool* append, int* ierror, int filelen);


#endif

