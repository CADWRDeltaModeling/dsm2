       !>@ingroup fortran
       !>@defgroup hydro_comp_point hydro_comp_point
       !>@{
        
       !> Clear the buffer of all stored data of type hydro_comp_point 
       subroutine hydro_comp_point_clear_buffer()
         !DEC$ IF DEFINED(_WIN32)
         !DEC$ ATTRIBUTES ALIAS:'_hydro_comp_point_clear_buffer_f' :: hydro_comp_point_clear_buffer_f
	 !DEC$ ELSE
         !DEC$ ATTRIBUTES ALIAS:'hydro_comp_point_clear_buffer_f' :: hydro_comp_point_clear_buffer_f
	 !DEC$ END IF
         implicit none
         call hydro_comp_point_clear_buffer_f()
         return
       end subroutine

       !> Query the number of records in storage buffer of type hydro_comp_point
       integer function hydro_comp_point_buffer_size()
         !DEC$ IF DEFINED(_WIN32)
         !DEC$ ATTRIBUTES ALIAS:'_hydro_comp_point_buffer_size_f' :: hydro_comp_point_buffer_size_f
	 !DEC$ ELSE
         !DEC$ ATTRIBUTES ALIAS:'hydro_comp_point_buffer_size_f' :: hydro_comp_point_buffer_size_f
	 !DEC$ END IF
          implicit none
          integer, external :: hydro_comp_point_buffer_size_f
          hydro_comp_point_buffer_size = hydro_comp_point_buffer_size_f()
          return
       end function
       
       !> write hydro_comp_point data to buffer
       subroutine hydro_comp_point_append_to_buffer(comp_index,channel,distance,ierror)
         !DEC$ IF DEFINED(_WIN32)
         !DEC$ ATTRIBUTES ALIAS:'_hydro_comp_point_append_to_buffer_f' :: hydro_comp_point_append_to_buffer_f
	 !DEC$ ELSE
         !DEC$ ATTRIBUTES ALIAS:'hydro_comp_point_append_to_buffer_f' :: hydro_comp_point_append_to_buffer_f
	 !DEC$ END IF
         implicit none
         integer, intent(out) :: ierror         
               integer, intent(in) :: comp_index
       integer, intent(in) :: channel
       real(8), intent(in) :: distance
         call hydro_comp_point_append_to_buffer_f(comp_index,channel,distance,ierror)
         return
       end subroutine
       
       !> Query the number of records in hdf5 of type hydro_comp_point
       subroutine hydro_comp_point_number_rows_hdf5(file_id, nrecords,ierror)
         !DEC$ IF DEFINED(_WIN32)
         !DEC$ ATTRIBUTES ALIAS:'_hydro_comp_point_number_rows_hdf5_f' :: hydro_comp_point_number_rows_hdf5_f
	 !DEC$ ELSE
         !DEC$ ATTRIBUTES ALIAS:'hydro_comp_point_number_rows_hdf5_f' :: hydro_comp_point_number_rows_hdf5_f
	 !DEC$ END IF
          use hdf5, only: HID_T,HSIZE_T
          implicit none
          integer :: nrecords
          integer(HSIZE_T) :: nrec = 0
          integer(HID_T),intent(in)::file_id
          integer, intent(out) :: ierror
          call hydro_comp_point_number_rows_hdf5_f(file_id,nrec,ierror)
          nrecords = nrec
          return
       end subroutine



       !> Query row of data from buffer of type hydro_comp_point
       subroutine hydro_comp_point_query_from_buffer(row, comp_index,channel,distance,ierror)
         !DEC$ IF DEFINED(_WIN32)
         !DEC$ ATTRIBUTES ALIAS:'_hydro_comp_point_query_from_buffer_f' :: hydro_comp_point_query_from_buffer_f
	 !DEC$ ELSE
         !DEC$ ATTRIBUTES ALIAS:'hydro_comp_point_query_from_buffer_f' :: hydro_comp_point_query_from_buffer_f
	 !DEC$ END IF
          implicit none
                integer, intent(out) :: comp_index
       integer, intent(out) :: channel
       real(8), intent(out) :: distance
          integer row
          integer, intent(out) :: ierror
          call hydro_comp_point_query_from_buffer_f(row, &
                    comp_index,channel,distance,ierror)
          return
       end subroutine

       !> Prioritize buffer by layers, delete unused items and sort
       subroutine hydro_comp_point_prioritize_buffer(ierror)
         !DEC$ IF DEFINED(_WIN32)
         !DEC$ ATTRIBUTES ALIAS:'_hydro_comp_point_prioritize_buffer_f' :: hydro_comp_point_prioritize_buffer_f
	 !DEC$ ELSE
         !DEC$ ATTRIBUTES ALIAS:'hydro_comp_point_prioritize_buffer_f' :: hydro_comp_point_prioritize_buffer_f
	 !DEC$ END IF
	      implicit none
          integer, intent(out) :: ierror          
          call hydro_comp_point_prioritize_buffer_f(ierror)
       end subroutine

       !> Write a buffer of hydro_comp_point data to buffer 
       !! @param file_id handle to hdf5 file
       subroutine hydro_comp_point_write_buffer_to_hdf5(file_id, ierror)
         !DEC$ IF DEFINED(_WIN32)
         !DEC$ ATTRIBUTES ALIAS:'_hydro_comp_point_write_buffer_to_hdf5_f' :: hydro_comp_point_write_buffer_to_hdf5_f
	 !DEC$ ELSE
         !DEC$ ATTRIBUTES ALIAS:'hydro_comp_point_write_buffer_to_hdf5_f' :: hydro_comp_point_write_buffer_to_hdf5_f
	 !DEC$ END IF
         use hdf5, only: HID_T
         implicit none
         integer(HID_T), intent(in) :: file_id
         integer, intent(out) :: ierror         
         call hydro_comp_point_write_buffer_to_hdf5_f(file_id,ierror)
         return
       end subroutine

       !> Read a buffer of hydro_comp_point data from hdf5 to buffer 
       subroutine hydro_comp_point_read_buffer_from_hdf5(file_id,ierror)
         !DEC$ IF DEFINED(_WIN32)
         !DEC$ ATTRIBUTES ALIAS:'_hydro_comp_point_read_buffer_from_hdf5_f' :: hydro_comp_point_read_buffer_from_hdf5_f
	 !DEC$ ELSE
         !DEC$ ATTRIBUTES ALIAS:'hydro_comp_point_read_buffer_from_hdf5_f' :: hydro_comp_point_read_buffer_from_hdf5_f
	 !DEC$ END IF
         use hdf5, only: HID_T
         implicit none
         integer(HID_T), intent(in) :: file_id
         integer, intent(out) :: ierror         
         call hydro_comp_point_read_buffer_from_hdf5_f(file_id,ierror)
         return
       end subroutine

       subroutine hydro_comp_point_write_buffer_to_text(filename,append,ierror)
         !DEC$ IF DEFINED(_WIN32)
         !DEC$ ATTRIBUTES ALIAS:'_hydro_comp_point_write_buffer_to_text_f' :: hydro_comp_point_write_buffer_to_text_f
	 !DEC$ ELSE
         !DEC$ ATTRIBUTES ALIAS:'hydro_comp_point_write_buffer_to_text_f' :: hydro_comp_point_write_buffer_to_text_f
	 !DEC$ END IF
         implicit none
         integer, intent(out) :: ierror
         character*(*) filename
         logical append
         call hydro_comp_point_write_buffer_to_text_f(filename, append,ierror)
         return
       end subroutine     
       !@}



