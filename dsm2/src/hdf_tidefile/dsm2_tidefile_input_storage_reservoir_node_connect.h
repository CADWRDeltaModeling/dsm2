#ifndef reservoir_node_connect_STORAGE_H__
#define reservoir_node_connect_STORAGE_H__
/**
WARNING: THIS FILE WAS AUTOMATICALLY GENERATED USING A SCRIPT AND A TEMPLATE
DO NOT CHANGE THE CODE HERE.
IF THE CODE IS INCORRECT, FIX THE TEMPLATE OR SCRIPT
IF YOU WANT TO ADD NEW ITEMS, ADD THEM TO THE SCRIPT INPUT FILE AND RUN IT AFRESH
*/
#define _CRT_SECURE_NO_DEPRECATE  // viz studio deprecation warnings
#include "hdf5.h"
#include "hdf5_hl.h"
#include "hdf_storage.h"
#include "HDFTableManager.h"
#include "TableDescription.h"
#include "TableItemFunctors.h"
#include "boost/tuple/tuple_comparison.hpp"
#include "boost/tuple/tuple_io.hpp"
#include<iostream>
#include<vector>
#include<algorithm>
#include<string.h>
#include<iostream>


using namespace std;
using namespace boost;

/** Structure representing input of type reservoir_node_connect.
    This class is autogenerated by a script given
    a description of the object
    \ingroup userdata
*/
class reservoir_node_connect
{
public:

  /** Data type reservoir_node_connect, default constructor */
  typedef const boost::tuple<const int&>  identifier_type;

  reservoir_node_connect() :
    res_node_index(-901),
    res_index(-901),
    connect_index(-901),
    node_no(-901),
    ext_node_no(-901),
    used(true),
    layer(0)
  {
    fill_n(res_name,32,'\0');
    fill_n(connection_type,8,'\0');
  };

  /** Construct a reservoir_node_connect with actual data values */
  reservoir_node_connect(const int & a_res_node_index,
	                    const  char a_res_name[32],
						const int & a_res_index,
						const int & a_connect_index,
						const int & a_node_no,
						const int & a_ext_node_no,
						const  char a_connection_type[8],
						bool a_used=true, int a_layer = 0) :
    res_node_index(a_res_node_index),
    res_index(a_res_index),
    connect_index(a_connect_index),
    node_no(a_node_no),
    ext_node_no(a_ext_node_no),
    used(a_used),
    layer(a_layer)
  {
    memcpy(res_name,a_res_name,32);
    memcpy(connection_type,a_connection_type,8);
  }

  /**Copy constructor)
   */
  reservoir_node_connect (const reservoir_node_connect & other) :
    res_node_index(other.res_node_index),
    res_index(other.res_index),
    connect_index(other.connect_index),
    node_no(other.node_no),
    ext_node_no(other.ext_node_no),
    used(other.used),
    layer(other.layer)
  {
    memcpy(res_name,other.res_name,32);
    memcpy(connection_type,other.connection_type,8);
  }

  /** Identifier that distinguishes whether two entries are distinct */
  identifier_type identifier()  const
  {
     return identifier_type( res_node_index );
  }

  void set_identifier(identifier_type identifier)
  {
     res_node_index=identifier.get<0>();
  }

  /** Parent object class name.
      If this is a child item belonging to a parent, returns
      the name of the parent class. Otherwise returns the name
      of this class.
  */
  reservoir_node_connect::identifier_type parent_identifier()  const
  {
     return reservoir_node_connect::identifier_type( res_node_index );
  }

  /** Return the version/layer number of the parent object */
  int parent_version()  const
  {
    vector<reservoir_node_connect>& pbuf = HDFTableManager<reservoir_node_connect>::instance().buffer();
    reservoir_node_connect parent;
    parent.set_identifier(parent_identifier());
    vector<reservoir_node_connect>::iterator loc = lower_bound(pbuf.begin(),
                                                pbuf.end(),
                                                parent,
                                                identifier_compare<reservoir_node_connect>());
    bool found = (loc!=pbuf.end()) && loc->identifier() == parent.identifier();
    if (found && loc->used){ return loc->layer; }
    else{ return -1; }
  }

  /** Return true if this layer of this object matches the layer of the parent object that will be use in the model.*/
  bool parent_valid()  const
  {
    return this->layer == parent_version();
  }

  /** Less-than operator based on the identifier plus (for parent objects) layer number*/
  bool operator< (const reservoir_node_connect & other) const
  {

     if(this->identifier() != other.identifier())
	 {
		 return this->identifier() < other.identifier();
	 }
	 // todo: make this a policy
	 bool layerOutranks = (this->layer == 0 && other.layer != 0) ||
		                  (this->layer > other.layer && other.layer != 0);
     return layerOutranks;

  }

  /** Less-than operator based on the identifier plus (for parent objects) layer number*/
  bool operator== (const reservoir_node_connect & other) const
  {
     return ((*this < other ) || (other < *this)) ? false : true;
  }

  /** Assignment that includes all the data plus the used and layer fields */
  reservoir_node_connect& operator=(const reservoir_node_connect& rhs)
  {
    this->res_node_index=rhs.res_node_index;
    strcpy(this->res_name,rhs.res_name);
    this->res_index=rhs.res_index;
    this->connect_index=rhs.connect_index;
    this->node_no=rhs.node_no;
    this->ext_node_no=rhs.ext_node_no;
    strcpy(this->connection_type,rhs.connection_type);
    used = rhs.used;
    layer = rhs.layer;
    return *this;
  }

  /** Return the class name of this object (reservoir_node_connect) */
  string objectName() const
  {
    return "reservoir_node_connect";
  }


  int res_node_index;
  char res_name[32];
  int res_index;
  int connect_index;
  int node_no;
  int ext_node_no;
  char connection_type[8];
  /** indicator that the entry is used (true if not marked deleted by user)*/
  bool used;
  /** layer (version number) of this entry */
  int layer;
};

typedef HDFTableManager<reservoir_node_connect> reservoir_node_connect_table;

hid_t string_type(size_t n);

TableDescription reservoir_node_connect_table_description();

istream& operator>> (istream& stream, reservoir_node_connect & obj);
ostream& operator<<(ostream & stream, const reservoir_node_connect & obj);



////////// FORTRAN-LINKABLE API //////////
#define FCALL extern "C"


/**
  Clear the buffer, compatible with fortran
*/
FCALL void reservoir_node_connect_clear_buffer_f();

/** query number of records being stored in buffer */
FCALL int reservoir_node_connect_buffer_size_f();


/** append to buffer, compatible with fortran, returns new size*/
FCALL void reservoir_node_connect_append_to_buffer_f(const int * a_res_node_index,const  char a_res_name[32],const int * a_res_index,const int * a_connect_index,const int * a_node_no,const int * a_ext_node_no,const  char a_connection_type[8], int * ierror,
              const int res_name_len,const int connection_type_len);

/** both makes the table and writes the contents of the buffer to it */
FCALL void reservoir_node_connect_write_buffer_to_hdf5_f(const hid_t* file_id, int* ierror);

/** reads the table in from a file into the buffer*/
FCALL void reservoir_node_connect_read_buffer_from_hdf5_f(const hid_t* file_id, int* ierror);

/** query size information about the table in hdf5
*/
FCALL void reservoir_node_connect_number_rows_hdf5_f(const hid_t* file_id, hsize_t* nrecords, int* ierror);


/** get one row worth of information from the buffer */
FCALL void reservoir_node_connect_query_from_buffer_f(int32_t* row,
                        int * a_res_node_index, char a_res_name[32],int * a_res_index,int * a_connect_index,int * a_node_no,int * a_ext_node_no, char a_connection_type[8], int * ierror,
              int res_name_len,int connection_type_len);
/**
  prioritize buffer by layers, delete unused items and sort
  */
FCALL void reservoir_node_connect_prioritize_buffer_f(int* ierror);
/**
   write buffer to the given text file. File will be appended if exists and append flag is set to true.
   otherwise the file will be created or overwritten.
 */
FCALL void reservoir_node_connect_write_buffer_to_text_f(const char* file, const bool* append, int* ierror, int filelen);


#endif

