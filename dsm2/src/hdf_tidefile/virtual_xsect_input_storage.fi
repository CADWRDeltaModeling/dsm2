       !>@ingroup fortran
       !>@defgroup virtual_xsect virtual_xsect
       !>@{
        
       !> Clear the buffer of all stored data of type virtual_xsect 
       subroutine virtual_xsect_clear_buffer()
         !DEC$ IF DEFINED(_WIN32)
         !DEC$ ATTRIBUTES ALIAS:'_virtual_xsect_clear_buffer_f' :: virtual_xsect_clear_buffer_f
	 !DEC$ ELSE
         !DEC$ ATTRIBUTES ALIAS:'virtual_xsect_clear_buffer_f' :: virtual_xsect_clear_buffer_f
	 !DEC$ END IF
         implicit none
         call virtual_xsect_clear_buffer_f()
         return
       end subroutine

       !> Query the number of records in storage buffer of type virtual_xsect
       integer function virtual_xsect_buffer_size()
         !DEC$ IF DEFINED(_WIN32)
         !DEC$ ATTRIBUTES ALIAS:'_virtual_xsect_buffer_size_f' :: virtual_xsect_buffer_size_f
	 !DEC$ ELSE
         !DEC$ ATTRIBUTES ALIAS:'virtual_xsect_buffer_size_f' :: virtual_xsect_buffer_size_f
	 !DEC$ END IF
          implicit none
          integer, external :: virtual_xsect_buffer_size_f
          virtual_xsect_buffer_size = virtual_xsect_buffer_size_f()
          return
       end function
       
       !> write virtual_xsect data to buffer
       subroutine virtual_xsect_append_to_buffer(chan_no,num_virt_sec,vsecno,num_elev,min_elev,elevation,area,wet_p,width,ierror)
         !DEC$ IF DEFINED(_WIN32)
         !DEC$ ATTRIBUTES ALIAS:'_virtual_xsect_append_to_buffer_f' :: virtual_xsect_append_to_buffer_f
	 !DEC$ ELSE
         !DEC$ ATTRIBUTES ALIAS:'virtual_xsect_append_to_buffer_f' :: virtual_xsect_append_to_buffer_f
	 !DEC$ END IF
         implicit none
         integer, intent(out) :: ierror         
               integer, intent(in) :: chan_no
       integer, intent(in) :: num_virt_sec
       integer, intent(in) :: vsecno
       integer, intent(in) :: num_elev
       real(8), intent(in) :: min_elev
       real(8), intent(in) :: elevation
       real(8), intent(in) :: area
       real(8), intent(in) :: wet_p
       real(8), intent(in) :: width
         call virtual_xsect_append_to_buffer_f(chan_no,num_virt_sec,vsecno,num_elev,min_elev,elevation,area,wet_p,width,ierror)
         return
       end subroutine
       
       !> Query the number of records in hdf5 of type virtual_xsect
       subroutine virtual_xsect_number_rows_hdf5(file_id, nrecords,ierror)
         !DEC$ IF DEFINED(_WIN32)
         !DEC$ ATTRIBUTES ALIAS:'_virtual_xsect_number_rows_hdf5_f' :: virtual_xsect_number_rows_hdf5_f
	 !DEC$ ELSE
         !DEC$ ATTRIBUTES ALIAS:'virtual_xsect_number_rows_hdf5_f' :: virtual_xsect_number_rows_hdf5_f
	 !DEC$ END IF
          use hdf5, only: HID_T,HSIZE_T
          implicit none
          integer :: nrecords
          integer(HSIZE_T) :: nrec = 0
          integer(HID_T),intent(in)::file_id
          integer, intent(out) :: ierror
          call virtual_xsect_number_rows_hdf5_f(file_id,nrec,ierror)
          nrecords = nrec
          return
       end subroutine



       !> Query row of data from buffer of type virtual_xsect
       subroutine virtual_xsect_query_from_buffer(row, chan_no,num_virt_sec,vsecno,num_elev,min_elev,elevation,area,wet_p,width,ierror)
         !DEC$ IF DEFINED(_WIN32)
         !DEC$ ATTRIBUTES ALIAS:'_virtual_xsect_query_from_buffer_f' :: virtual_xsect_query_from_buffer_f
	 !DEC$ ELSE
         !DEC$ ATTRIBUTES ALIAS:'virtual_xsect_query_from_buffer_f' :: virtual_xsect_query_from_buffer_f
	 !DEC$ END IF
          implicit none
                integer, intent(out) :: chan_no
       integer, intent(out) :: num_virt_sec
       integer, intent(out) :: vsecno
       integer, intent(out) :: num_elev
       real(8), intent(out) :: min_elev
       real(8), intent(out) :: elevation
       real(8), intent(out) :: area
       real(8), intent(out) :: wet_p
       real(8), intent(out) :: width
          integer row
          integer, intent(out) :: ierror
          call virtual_xsect_query_from_buffer_f(row, &
                    chan_no,num_virt_sec,vsecno,num_elev,min_elev,elevation,area,wet_p,width,ierror)
          return
       end subroutine

       !> Prioritize buffer by layers, delete unused items and sort
       subroutine virtual_xsect_prioritize_buffer(ierror)
         !DEC$ IF DEFINED(_WIN32)
         !DEC$ ATTRIBUTES ALIAS:'_virtual_xsect_prioritize_buffer_f' :: virtual_xsect_prioritize_buffer_f
	 !DEC$ ELSE
         !DEC$ ATTRIBUTES ALIAS:'virtual_xsect_prioritize_buffer_f' :: virtual_xsect_prioritize_buffer_f
	 !DEC$ END IF
	      implicit none
          integer, intent(out) :: ierror          
          call virtual_xsect_prioritize_buffer_f(ierror)
       end subroutine

       !> Write a buffer of virtual_xsect data to buffer 
       !! @param file_id handle to hdf5 file
       subroutine virtual_xsect_write_buffer_to_hdf5(file_id, ierror)
         !DEC$ IF DEFINED(_WIN32)
         !DEC$ ATTRIBUTES ALIAS:'_virtual_xsect_write_buffer_to_hdf5_f' :: virtual_xsect_write_buffer_to_hdf5_f
	 !DEC$ ELSE
         !DEC$ ATTRIBUTES ALIAS:'virtual_xsect_write_buffer_to_hdf5_f' :: virtual_xsect_write_buffer_to_hdf5_f
	 !DEC$ END IF
         use hdf5, only: HID_T
         implicit none
         integer(HID_T), intent(in) :: file_id
         integer, intent(out) :: ierror         
         call virtual_xsect_write_buffer_to_hdf5_f(file_id,ierror)
         return
       end subroutine

       !> Read a buffer of virtual_xsect data from hdf5 to buffer 
       subroutine virtual_xsect_read_buffer_from_hdf5(file_id,ierror)
         !DEC$ IF DEFINED(_WIN32)
         !DEC$ ATTRIBUTES ALIAS:'_virtual_xsect_read_buffer_from_hdf5_f' :: virtual_xsect_read_buffer_from_hdf5_f
	 !DEC$ ELSE
         !DEC$ ATTRIBUTES ALIAS:'virtual_xsect_read_buffer_from_hdf5_f' :: virtual_xsect_read_buffer_from_hdf5_f
	 !DEC$ END IF
         use hdf5, only: HID_T
         implicit none
         integer(HID_T), intent(in) :: file_id
         integer, intent(out) :: ierror         
         call virtual_xsect_read_buffer_from_hdf5_f(file_id,ierror)
         return
       end subroutine

       subroutine virtual_xsect_write_buffer_to_text(filename,append,ierror)
         !DEC$ IF DEFINED(_WIN32)
         !DEC$ ATTRIBUTES ALIAS:'_virtual_xsect_write_buffer_to_text_f' :: virtual_xsect_write_buffer_to_text_f
	 !DEC$ ELSE
         !DEC$ ATTRIBUTES ALIAS:'virtual_xsect_write_buffer_to_text_f' :: virtual_xsect_write_buffer_to_text_f
	 !DEC$ END IF
         implicit none
         integer, intent(out) :: ierror
         character*(*) filename
         logical append
         call virtual_xsect_write_buffer_to_text_f(filename, append,ierror)
         return
       end subroutine     
       !@}



