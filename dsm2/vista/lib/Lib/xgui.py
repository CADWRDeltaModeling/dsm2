# Todo
# 1. ability to do x vs y plots + linear regression
# 2. Each data set can choose its own curve #
# X3. Aribitray text location on plot
# X4. Legend text spacing to be fixed
# X5. More control over Font(s) and sizes
# X6. GIF/JPEG Images option for web enabling
# X7. Printing for 2d plots with dashed lines.
# X8. init script before data retrieval
# X9. rearranging GUI elements
# X10. Rotating y axis text by 90 deg.
# ?11. footer of graph == right text, center text, left text
# 12. Comments associated with study, graphs & plots
# X13. Fix needed for raw refs
# X14. Add warning or save if study has been modified and user attempts to exit
# X15. Key bindings for common functions.
# 16. Move the time window to the main window.
# 17. Have the plot options tab contain the legend position and legend text sizes
# 18. Have the plot options tab contain the text locations and sizes
# 19. Have the curve number & relative position of expression table be associated
# X20. Have graph contain the plot font sizes and title sizes
import xplot
from xplot import *
#
from java.lang import System
from javax.swing.event import TreeSelectionListener
from java.util import Properties
from java.io import FileOutputStream
from java.awt import GridLayout, FileDialog, BorderLayout, Cursor
from javax.swing.event import ChangeEvent
from javax.swing import JFrame, JTable, JPanel, JTextField, \
     JScrollPane, JMenuItem, JMenu, JMenuBar, JTabbedPane, JTree, \
     JOptionPane, ImageIcon, JSplitPane, JTextArea, SwingConstants
from java.awt.event import MouseAdapter,KeyEvent
from java.lang import System
#
from vista.graph import GEDialog, GEDialogPanel
from javax.swing import KeyStroke,WindowConstants
#java help stuff
import javax.help
from javax.help import CSH, HelpSet
#
_debug = 0
#
def error_handler(tb,excinfo,source):
    """
    Handles exceptions, dumps the stack and shows a msg
    dialog with the exception message to user
    """
    print ''
    #print 'Exc info: ', excinfo
    if excinfo[1] == None:
        last_msg = str(excinfo[0])
    else:
        last_msg = str(excinfo[1])
    print '-'*30
    #print tb.dumpStack()
    print '-'*30
    JOptionPane.showMessageDialog(source, last_msg, \
                  "Exception!", JOptionPane.ERROR_MESSAGE)
# add delete, new, move up/down functionality
class CursorMouseListener(MouseAdapter):
    def mousePressed(self,evt):
        pass
#
class MainGui:
    props = Properties()
    def __init__(self,file=None,exit_on_close=1):
        fr = JFrame('Vista Plotter: Untitled')
        fr.getGlassPane().addMouseListener(CursorMouseListener())
        cp = fr.getContentPane()
        cp.setLayout(BorderLayout())
        from java.lang import System
        MainGui.props = Properties()
        MainGui.props.put("landscape","1")
        MainGui.props.put("printer.name","hos215rm5c")
        MainGui.props.put("legend.font.size","10")
        MainGui.props.put("left.axis.font.size","10")
        MainGui.props.put("bottom.axis.font.size","12")
        MainGui.props.put("plot.title.font.size","18")
        MainGui.props.put("show.prescript","true")
        MainGui.props.put("show.postscript","true")
        propsFile = System.getProperty("user.home")+\
            System.getProperty("file.separator")+".vplotter"
        fis = None
        try:
            fis = FileInputStream(propsFile)
        except:
            print 'No property initialization file: Creating one...'
            fis = None
        if fis == None:
            fos = FileOutputStream(propsFile)
            MainGui.props.save(fos,"Generated by vplotter")
            fos.close()
        else:
            MainGui.props.load(fis)
        DataGraphFrame.LANDSCAPE_PRINTING = string.atoi(MainGui.props.getProperty("landscape"))
        DataGraphFrame.PRINTER_NAME = MainGui.props.getProperty("printer.name")
        xplot.__legend_font_size__ = int(MainGui.props.getProperty("legend.font.size"))
        xplot.__left_axis_font_size__ = int(MainGui.props.getProperty("left.axis.font.size"))
        xplot.__bottom_axis_font_size__ = int(MainGui.props.getProperty("bottom.axis.font.size"))
        xplot.__plot_title_font_size__ = int(MainGui.props.getProperty("plot.title.font.size"))
        self.sgui = StudyGui()
        global main_gui
        main_gui = self
        cp.add(self.sgui,BorderLayout.CENTER)
        mbar = self.sgui.getMenuBar()
        if file != None: self.sgui.load_action(None,file)
        # set up online help
        hm = JMenu("Help")
        #
        try:
            ohitem = JMenuItem("Online Help")
            cl = ohitem.getClass().getClassLoader()
            url = HelpSet.findHelpSet(cl,"VistaHelp")
            mainHS = HelpSet(cl,url)
            mainHB = mainHS.createHelpBroker()
            ohitem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H,KeyEvent.CTRL_MASK))
            ohitem.addActionListener(CSH.DisplayHelpFromSource(mainHB))
            hm.add(ohitem)
        except:
            print 'No online help available!!'
            pass
        #
        aitem = JMenuItem("About")
        #aitem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H,KeyEvent.CTRL_MASK))
        aitem.actionPerformed = self.show_about_dialog
        hm.add(aitem)
        mbar.add(hm)
        fr.setJMenuBar(mbar)
        tk = Toolkit.getDefaultToolkit()
        d = tk.getScreenSize()
        w,h = d.width*0.7,d.height*0.7
        fr.setSize(int(w),int(h))
        fr.show()
        fr.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE)
        if exit_on_close:
            from java.awt.event import WindowAdapter
            class ExitWindowListener(WindowAdapter):
                def windowClosing(self,wevt):
                    main_gui.sgui.exit_action(wevt)
            wl = ExitWindowListener()
            fr.addWindowListener(wl)
        self.frame = fr
    def set_cursor(self):
        self._old_cursor = self.frame.getCursor()
        self.frame.getGlassPane().setVisible(1)
        self.frame.getGlassPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR))
        self.frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR))
    def unset_cursor(self):
        glass = self.frame.getGlassPane()
        glass.setCursor(self._old_cursor)
        glass.setVisible(0)
        self.frame.setCursor(self._old_cursor);
    def show_online_help(self,evt):
        pass
    def show_about_dialog(self,evt):
        dwrIcon = ImageIcon(VistaUtils.getImageAsBytes("/vista/DWR_Logo-1.0in.gif"))
        programName = "VPlotter: " + VistaUtils.getVersionId();
        msg_str = programName + "\n" + VistaUtils.getLocaleDescription() + "\n" +\
              "Author: Nicky Sandhu\n"+\
              "Copyright (C) 2000 State of California, Department of Water Resources"
        JOptionPane.showMessageDialog(self.frame, msg_str, \
                          "About",JOptionPane.INFORMATION_MESSAGE,dwrIcon)
class OptionsDialog(JDialog):
    def __init__(self,gd):
        self.gd = gd
        self.dummy_graph = Graph()
        pane = self.getContentPane()
        pane.setLayout(BorderLayout())
        #
        okBtn = JButton("OK",actionPerformed=self.ok_action)
        cancelBtn = JButton("Cancel",actionPerformed=self.cancel_action)
        btnPanel = JPanel()
        btnPanel.setLayout(XYGridLayout(10,7))
        btnPanel.add(okBtn, Rectangle(1,3,3,2))
        btnPanel.add(cancelBtn, Rectangle(5,3,3,2))
        self.pfield = JTextField(DataGraphFrame.PRINTER_NAME)
        ppanel = JPanel(); ppanel.setLayout(BorderLayout()); ppanel.add(self.pfield)
        ppanel.setBorder(BorderFactory.createTitledBorder("Printer name"))
        self.lchoice = JCheckBox("Print Landscape",DataGraphFrame.LANDSCAPE_PRINTING)
        self.legend_field = JTextField(str(self.gd.font_data.legend),4)
        tp1 = self.mkTitledPanel(self.legend_field,"legend font size")
        self.laxis_field = JTextField(str(self.gd.font_data.laxis),4)
        tp2 = self.mkTitledPanel(self.laxis_field,"left axis font size")
        self.baxis_field = JTextField(str(self.gd.font_data.baxis),4)
        tp3 = self.mkTitledPanel(self.baxis_field,"bottom axis font size")
        self.title_field = JTextField(str(self.gd.font_data.plot_title),4)
        tp4 = self.mkTitledPanel(self.title_field,"plot title font size")
        self.graph_title_field = JTextField(str(self.gd.font_data.title),4)
        tp5 = self.mkTitledPanel(self.graph_title_field,"graph title font size")
        self.footer_field = JTextField(str(self.gd.font_data.footer),4)
        tp6 = self.mkTitledPanel(self.footer_field,"footer font size")
        text_panel= JPanel(); text_panel.setLayout(GridLayout(2,3))
        text_panel.add(tp5);text_panel.add(tp4);text_panel.add(tp1)
        text_panel.add(tp2);text_panel.add(tp3); text_panel.add(tp6)
        text_panel.setBorder(BorderFactory.createTitledBorder("Font sizes"))
        #
        print_panel = JPanel()
        print_panel.setLayout(GridLayout(1,2))
        print_panel.add(ppanel); print_panel.add(self.lchoice)
        print_panel.setBorder(BorderFactory.createTitledBorder("Print options"))
        eattr = JButton("Edit Curve Attributes...")
        eattr.actionPerformed = self.show_attributes_dialog
        gattrBtn = JButton("Edit Graph Attributes...")
        gattrBtn.actionPerformed = self.show_graph_attributes_dialog
        attr_panel = JPanel()
        attr_panel.setLayout(GridLayout(1,2))
        attr_panel.add(eattr); attr_panel.add(gattrBtn)
        attr_panel.setBorder(BorderFactory.createTitledBorder("Attributes"))
        cpanel = JPanel()
        cpanel.setLayout(GridLayout(3,1))
        cpanel.add(print_panel)
        cpanel.add(text_panel)
        cpanel.add(attr_panel)
        #
        pane.add(cpanel)
        pane.add(btnPanel,BorderLayout.SOUTH)
        self.setLocation(100,100)
        self.pack()
        self.setVisible(1)
    def mkTitledPanel(self,comp,title):
        tp = JPanel(); tp.setLayout(BorderLayout()); tp.add(comp)
        tp.setBorder(BorderFactory.createTitledBorder(title))
        return tp
    def ok_action(self,evt):
        DataGraphFrame.LANDSCAPE_PRINTING = self.lchoice.isSelected()
        GraphData.landscape = DataGraphFrame.LANDSCAPE_PRINTING
        DataGraphFrame.PRINTER_NAME = self.pfield.text
        self.gd.font_data.legend = int(self.legend_field.text)
        self.gd.font_data.laxis = int(self.laxis_field.text)
        self.gd.font_data.baxis = int(self.baxis_field.text)
        self.gd.font_data.plot_title = int(self.title_field.text)
        self.gd.font_data.title = int(self.graph_title_field.text)
        self.gd.font_data.footer = int(self.footer_field.text)
        MainGui.props.put("landscape",str(DataGraphFrame.LANDSCAPE_PRINTING))
        MainGui.props.put("printer.name",DataGraphFrame.PRINTER_NAME)
        MainGui.props.put("legend.font.size",str(xplot.__legend_font_size__))
        MainGui.props.put("left.axis.font.size",str(xplot.__left_axis_font_size__))
        MainGui.props.put("bottom.axis.font.size",str(xplot.__bottom_axis_font_size__))
        MainGui.props.put("plot.title.font.size",str(xplot.__plot_title_font_size__))
        self.gd.mkCurveAttributes()
        self.cancel_action(evt)
    def cancel_action(self,evt):
        self.dispose()
    def show_attributes_dialog(self,evt):
        cd = CurveDialog(self.gd.attrs)
    def show_graph_attributes_dialog(self,evt):
        self.dummy_graph.setAttributes(self.gd.graph_attrs)
        p = GEDialogPanel(self.dummy_graph)
        d = GEDialog(VistaUtils.getFrameForComponent(self),p)
        d.show()
    def show_text_attributes_dialog(self,evt):
        a1 = GEDialogPanel(self.dummy_legend_text)
        a2 = GEDialogPanel(self.dummy_left_axis_text)
        a3 = GEDialogPanel(self.dummy_bottom_axis_text)
        a4 = GEDialogPanel(self.dummy_plot_title_text)
        p = JTabbedPane()
        p.add("Legend",a1)
        p.add("Left Axis",a2)
        p.add("Bottom Axis",a3)
        p.add("Plot Title",a4)
        p.setBorder(BorderFactory.createTitledBorder("Text Attributes"))
        d = GEDialog(VistaUtils.getFrameForComponent(self),p)
        d.show()
class StudyGui(JPanel,TreeSelectionListener):
    def __init__(self,sd = None):
        if sd == None:
            self.sd = StudyData('New Study')
        else:
            self.sd = sd
        gd = GraphData('')
        gd.study = self.sd
        self.ggui=GraphGui(gd)
        self.setLayout(BorderLayout())
        self.add(self.ggui)
        self.ggui.tree.getModel().setRoot(self.sd.root)
        self.ggui.tree.addTreeSelectionListener(self)
        #
        self.keybindings = { "Save": (KeyEvent.VK_S,KeyEvent.CTRL_MASK),\
                 "Save As": (KeyEvent.VK_A,KeyEvent.CTRL_MASK),\
                 "Open": (KeyEvent.VK_O,KeyEvent.CTRL_MASK),\
                 "New" : (KeyEvent.VK_N,KeyEvent.CTRL_MASK),\
                 "Exit" : (KeyEvent.VK_X,KeyEvent.CTRL_MASK),\
                 "Remove": (KeyEvent.VK_R,KeyEvent.CTRL_MASK),\
                 "Move Up": (KeyEvent.VK_U,KeyEvent.CTRL_MASK),\
                 "Move Down": (KeyEvent.VK_D,KeyEvent.CTRL_MASK),\
                 "Graph": (KeyEvent.VK_G,KeyEvent.ALT_MASK),\
                 "Tabulate": (KeyEvent.VK_T,KeyEvent.ALT_MASK),\
                 "Save To Web": (KeyEvent.VK_W,KeyEvent.ALT_MASK),\
                 "Write To DSS":(KeyEvent.VK_D,KeyEvent.ALT_MASK)}
        self.actions = {"Save As": self.saveas_action,\
            "Save": self.save_action,\
            "Open": self.load_action,\
            "New": self.new_action,\
            "New Graph Data": self.new_data_action,\
            "New Plot Data": self.new_plot_data_action,\
            "Load Graph Data": self.ggui.load_action, \
            "Remove": self.remove_action, \
            "Move Up": self.moveup_action, \
            "Move Down": self.movedown_action,\
            "Clone": self.clone_action,\
            "Exit": self.exit_action,\
            "Graph": self.graph_action,\
            "Tabulate": self.tabulate_action,\
            "Run Script": self.run_script_action,\
            "Save To Gif": self.savegif_action, \
            "Save To Web": self.saveweb_action, \
            "Save To JPEG": self.savejpg_action, \
            "Write To DSS": self.writedss_action, \
            "Write To Text": self.writetxt_action, \
            "Open DSS File": self.opendss_action,\
            "Load Functions": self.openpy_action
            }
    def common_action(self,evt):
        main_gui.set_cursor()
        if _debug :
            self.actions[evt.getSource().text](evt)
        else:
            from java.lang import Exception
            try:
                self.actions[evt.getSource().text](evt)
            except:
                tb = sys.exc_traceback
                excinfo = sys.exc_info()
                source = evt.getSource()
                error_handler(tb,excinfo,source)
        main_gui.unset_cursor()
    def openpy_action(self,evt):
        file = VistaUtils.getFilenameFromDialog(self, FileDialog.SAVE, "py", "Python Files")
        if file == None: return
        self.sd.execfile(file)
    def run_script_action(self,evt):
        self.update_from_gui()
        x = self.getSelectedNode()
        if x == None: return
        uobj = x.getUserObject()
        if hasattr(uobj,'run_script'):
            uobj.run_script()
    def graph_action(self,evt):
        self.update_from_gui()
        x = self.getSelectedNode()
        if x == None: return
        uobj = x.getUserObject()
        if hasattr(uobj,'graph'):
            uobj.graph()
        elif hasattr(uobj,'display_graph'):
            gd = x.getParent().getUserObject()
            uobj.display_graph(gd)
    def tabulate_action(self,evt):
        self.update_from_gui()
        x = self.getSelectedNode()
        if x == None: return
        uobj = x.getUserObject()
        if hasattr(uobj,'tabulate'):
            uobj.tabulate()
        elif hasattr(uobj,'display_table'):
            uobj.display_table()
    def savegif_action(self,evt):
        self.update_from_gui()
        file = VistaUtils.getDirectoryNameFromDialog(self, FileDialog.SAVE)
        if file == None: return
        x = self.getSelectedNode()
        if x == None: return
        if hasattr(x.getUserObject(),'graph'):
            x.getUserObject().saveimg(file,"gif")
    def saveweb_action(self,evt):
        self.update_from_gui()
        file = VistaUtils.getFilenameFromDialog(self, FileDialog.SAVE, "html", "HTML Study file")
        if file == None: return
        x = self.getSelectedNode()
        if x == None: return
        if hasattr(x.getUserObject(),'saveweb'):
            x.getUserObject().saveweb(file)
    def savejpg_action(self,evt):
        file = VistaUtils.getDirectoryNameFromDialog(self, FileDialog.SAVE)
        if file == None: return
        self.update_from_gui()
        x = self.getSelectedNode()
        if x == None: return
        if hasattr(x.getUserObject(),'graph'):
            x.getUserObject().saveimg(file,"jpg")
    def exit_action(self,evt):
        # if modified
        fr = VistaUtils.getFrameForComponent(self)
        exit_option = JOptionPane.showConfirmDialog(fr,"Exit?","Exit?",JOptionPane.YES_NO_OPTION)
        if exit_option == JOptionPane.NO_OPTION: return
        propsFile = System.getProperty("user.home")+\
                System.getProperty("file.separator")+".vplotter"
        fos = FileOutputStream(propsFile)
        MainGui.props.save(fos,"Generated by vplotter")
        fos.close()
        if _debug:
            print 'Window closed'
        else:
            System.exit(0)
    def valueChanged(self,evt):
        self.ggui.update_from_gui()
        tnode = evt.getPath().getLastPathComponent()
        uobj = tnode.getUserObject()
        #print tnode,uobj
        if uobj == None: 
            return
        if isinstance(uobj,GraphData):
            self.ggui.show_graph_gui()
            self.ggui.repaint()
            uobj = uobj
        elif isinstance(uobj,PlotData):
            self.ggui.show_plot_gui()
            self.ggui.repaint()
            parent = tnode.getParent()
            if parent != None:
                puobj = parent.getUserObject()
            if hasattr(puobj,'graph'):
                uobj = puobj
            else:
                return
        else:
            self.ggui.show_study()
            self.ggui.repaint()
            return
        self.sd.current_gd = uobj
        self.ggui.gd = uobj
        self.ggui.update_to_gui()
    def getSelectedNode(self):
        item = self.ggui.tree.getSelectionPath()
        if item == None: return
        x = item.getPathComponent(item.getPathCount()-1)
        return x
    def new_action(self,evt):
        self.sd = StudyData("New Study")
        self.ggui.tree.getModel().setRoot(self.sd.root)
        self.ggui.tree.getModel().nodeStructureChanged(self.sd.root)
        self.ggui.tree.setSelectionRow(0)
        VistaUtils.getFrameForComponent(self).setTitle('Vista Plotter: Untitled')
    def update_from_gui(self):
        self.ggui.update_from_gui()
        self.sd.name = DefaultMutableTreeNode.getUserObject(self.ggui.tree.getModel().getRoot())
    def update_to_gui(self):
        self.ggui.update_to_gui()
        DefaultMutableTreeNode.setUserObject(self.ggui.tree.getModel().getRoot(),self.sd.name)
    def save_action(self,evt):
        file = self.sd.file
        if file == None:
            file = VistaUtils.getFilenameFromDialog(self, FileDialog.SAVE, "sty", "Study Files")
            if file == None: return
        # save copy of old file
        thisFile = File(file)
        bakFile = File(file+'.bak')
        thisFile.renameTo(File(file+'.bak'))
        self.update_from_gui()
        try:
            self.sd.save(file)
        except Exception, exc:
            bakFile.renameTo(thisFile)
            print 'Restoring old file on disk'
            raise exc
        VistaUtils.getFrameForComponent(self).setTitle('Vista Plotter: ' +file)
    def saveas_action(self,evt):
        file = VistaUtils.getFilenameFromDialog(self, FileDialog.SAVE, "sty", "Study Files")
        if file == None: return
        self.update_from_gui()
        self.sd.save(file)
        VistaUtils.getFrameForComponent(self).setTitle('Vista Plotter: ' +file)
    def load_action(self,evt,file=None):
        if file==None:
            file = VistaUtils.getFilenameFromDialog(\
            self, FileDialog.LOAD, "sty", "Study Files")
        if file == None: return
        self.sd.load(file)
        self.update_to_gui()
        self.ggui.tree.getModel().setRoot(self.sd.root)
        self.ggui.tree.getModel().nodeStructureChanged(self.sd.root)
        self.ggui.tree.setSelectionRow(0)
        VistaUtils.getFrameForComponent(self).setTitle('Vista Plotter: ' +file)
    def new_data_action(self,evt):
        self.sd.addGraphData(GraphData(''))
        self.ggui.tree.getModel().nodeStructureChanged(self.sd.root)
    def new_plot_data_action(self,evt):
        x = self.getSelectedNode()
        if isinstance(x.getUserObject(),GraphData):
            self.sd.current_gd.addPlotData(PlotData(self.sd.current_gd))
            self.ggui.tree.getModel().nodeStructureChanged(x)
        elif isinstance(x.getUserObject(),PlotData):
            self.sd.current_gd.addPlotData(PlotData(self.sd.current_gd))
            x = self.getSelectedNode()
            self.ggui.tree.getModel().nodeStructureChanged(x.getParent())
        else:
            raise "Invalid node selected for plot data: Choose Graph Node!"
    def clone_action(self,evt):
        x = self.getSelectedNode()
        if x == None: return
        if isinstance(x.getUserObject(),GraphData):
            self.sd.addGraphData(x.getUserObject()._mkclone())
        elif isinstance(x.getUserObject(),PlotData):
            self.sd.current_gd.addPlotData(x.getUserObject()._mkclone())
        self.ggui.tree.getModel().nodeStructureChanged(x.getParent())
    def remove_action(self,evt,x=None):
        if x==None:
            x = self.getSelectedNode()
        if x == None: return
        if isinstance(x.getUserObject(),GraphData):
            uobj = x.getUserObject()
            if uobj.pdata != None and len(uobj.pdata) > 0:
                raise "Cannot delete non-empty graph"
        elif isinstance(x.getUserObject(),PlotData):
            pass
        else:
            return
        parent = x.getParent()
        #print 'Removing %s from %s'%(str(x),str(parent))
        parent.remove(x)
        parent.getUserObject()._update()
        self.ggui.tree.getModel().nodeStructureChanged(parent)
    def moveup_action(self,evt):
        x = self.getSelectedNode()
        if x == None: return
        parent = x.getParent()
        if isinstance(x.getUserObject(),GraphData) or isinstance(x.getUserObject(),PlotData):
            i = parent.getIndex(x)
            if i == 0: return
            parent.remove(x)
            parent.insert(x,i-1)
            self.ggui.tree.getModel().nodeStructureChanged(parent)
            self.ggui.tree.setSelectionPath(TreePath(x.getPath()))
        parent.getUserObject()._update()
    def movedown_action(self,evt):
        x = self.getSelectedNode()
        if x == None: return
        parent = x.getParent()
        if isinstance(x.getUserObject(),GraphData) or isinstance(x.getUserObject(),PlotData):
            i = parent.getIndex(x)
            c = parent.getChildCount()
            if i == c-1 : return
            parent.remove(x)
            parent.insert(x,i+1)
            self.ggui.tree.getModel().nodeStructureChanged(parent)
            self.ggui.tree.setSelectionPath(TreePath(x.getPath()))
        parent.getUserObject()._update()
    def writedss_action(self,evt):
        x = self.getSelectedNode()
        if x == None: return
        uobj = x.getUserObject()
        if hasattr(uobj,'writedss'):
            #print "user object: %s"%str(uobj)
            file = VistaUtils.getFilenameFromDialog(self, FileDialog.SAVE, "dss", "DSS")
            if file == None: return
            uobj.writedss(file)
    def writetxt_action(self,evt):
        x = self.getSelectedNode()
        if x == None: return
        uobj = x.getUserObject()
        if hasattr(uobj,'writetxt'):
            #print "user object: %s"%str(uobj)
            file = VistaUtils.getFilenameFromDialog(self, FileDialog.SAVE, "txt", "Text")
            if file == None: return
            uobj.writetxt(file)
    def opendss_action(self,evt):
        file = VistaUtils.getFilenameFromDialog(self, FileDialog.LOAD, "dss", "DSS")
        if file == None: return
        GroupFrame(opendss(file))
    def add_action(self,menu,aname):
        if not self.actions.has_key(aname):
            raise "No key: " + aname + " in defined actions"
        item = JMenuItem(aname)
        if self.keybindings.has_key(aname):
            key,mask = self.keybindings[aname]
            item.setAccelerator(KeyStroke.getKeyStroke(key,mask))
        item.actionPerformed = self.common_action
        menu.add(item)
    def getMenuBar(self):
        fm = JMenu("File")
        self.add_action(fm,"Open")
        self.add_action(fm,"Save")
        self.add_action(fm,"Save As")
        self.add_action(fm,"New")
        fm.addSeparator()
        self.add_action(fm,"Open DSS File")
        fm.addSeparator()
        self.add_action(fm,"Load Graph Data")
        #self.add_action(fm,"Load Functions")
        fm.addSeparator()
        self.add_action(fm,"Exit")
        em = JMenu("Edit")
        self.add_action(em,"New Graph Data")
        self.add_action(em,"New Plot Data")
        em.addSeparator()
        self.add_action(em,"Clone")
        self.add_action(em,"Remove")
        self.add_action(em,"Move Up")
        self.add_action(em,"Move Down")
        gm = JMenu("Actions")
        self.add_action(gm,"Graph")
        self.add_action(gm,"Tabulate")
        self.add_action(gm,"Run Script")
        gm.addSeparator()
        self.add_action(gm,"Write To DSS")
        self.add_action(gm,"Write To Text")
        gm.addSeparator()
        self.add_action(gm,"Save To Web")
        self.add_action(gm,"Save To Gif")
        self.add_action(gm,"Save To JPEG")
        mbar = JMenuBar()
        mbar.add(fm)
        mbar.add(em)
        mbar.add(gm)
        return mbar
#
class GraphGui(JPanel):
    def __init__(self,gd=GraphData("")):
        self.gd = gd
        # -TP Replace JTree with DraggableTree
        #<old_code>
        #self.tree = JTree(self.gd.root)
        #</old_code>
        import dtree
        from dtree import DragableTree
        self.tree = DragableTree(self.gd.root)
        # -TP 20010201
        self.tree.setEditable(1)
        self.pgui = PlotGui(PlotData(gd))
        self.tree.addTreeSelectionListener(self.pgui)
        #
        self.actions = {"Save As": self.saveas_action,\
            "Save": self.save_action,\
            "Load": self.load_action,\
            "New": self.new_action,\
            "New Plot Data": self.new_data_action,\
            "Remove": self.remove_action,\
            "Move Up": self.moveup_action,\
            "Move Down": self.movedown_action,\
            "Clone": self.clone_action,\
            "Set Options...":self.show_options_dialog,\
            "Graph": self.graph_action,\
            #"Save To Gif": self.savegif_action,\
            "Save To JPEG": self.savejpg_action \
            }
        #
        # add title and row,column fields
        self.title_field = JTextField(self.gd.title,30)
        self.row_field = JTextField(str(self.gd.plot_rows),4)
        self.col_field = JTextField(str(self.gd.plot_columns),4)
        tp = JPanel(); tp.setLayout(BorderLayout())
        tp.add(self.title_field); tp.setBorder(BorderFactory.createTitledBorder("Graph Title"))
        rc_panel = JPanel()
        rp = JPanel(); rp.add(self.row_field)
        rp.add(self.row_field); rp.setBorder(BorderFactory.createTitledBorder("# of rows"))
        cp = JPanel(); cp.add(self.col_field)
        cp.add(self.col_field); cp.setBorder(BorderFactory.createTitledBorder("# of columns"))
        rc_panel.setLayout(GridLayout(1,2))
        rc_panel.add(rp)
        rc_panel.add(cp)
        options_panel = JPanel()
        options_panel.setLayout(GridLayout(2,1))
        options_panel.add(tp)
        options_panel.add(rc_panel)
        #
        north_panel = JPanel()
        north_panel.setLayout(BorderLayout())
        north_panel.add(self.getMenuBar(),BorderLayout.NORTH)
        north_panel.add(options_panel,BorderLayout.CENTER)
        #
        self.init_ta = JTextArea(len(gd.init_script_data.lines),50)
        jspta = JScrollPane(self.init_ta,\
                JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\
                JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS)
        jspta.setBorder(BorderFactory.createTitledBorder("Initialization and Definitions"))
        #
        self.main_panel = JPanel();self.main_panel.setLayout(GridLayout(4,1))
        self.main_panel.add(north_panel)
        self.main_panel.add(jspta)
        #
        self.study_init_ta = JTextArea(len(gd.study.init_script_data.lines),50)
        study_jspta = JScrollPane(self.study_init_ta,\
                 JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\
                 JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS)
        study_jspta.setBorder(BorderFactory.createTitledBorder("Initialization and Definitions"))
        self.study_panel = JPanel(); self.study_panel.setLayout(BorderLayout())
        self.study_panel.add(study_jspta)
        #
        jsp = JScrollPane(self.tree)
        tree_panel = JPanel()
        tree_panel.setLayout(BorderLayout())
        tree_panel.add(jsp,BorderLayout.CENTER)
        #
        self.right_panel = JPanel()
        self.right_panel.setLayout(BorderLayout())
        #
        self.setLayout(BorderLayout())
        self.add(JSplitPane(JSplitPane.HORIZONTAL_SPLIT,tree_panel,self.right_panel))
    def show_plot_gui(self):
        self.right_panel.removeAll()
        self.right_panel.add(self.pgui,BorderLayout.CENTER)
        self.right_panel.setVisible(1)
        self.right_panel.validate()
    def show_graph_gui(self):
        self.right_panel.removeAll()
        self.right_panel.add(self.main_panel,BorderLayout.CENTER)
        self.right_panel.setVisible(1)
        self.right_panel.validate()
    def show_study(self):
        #self.right_panel.setVisible(0)
        self.right_panel.removeAll()
        self.right_panel.add(self.study_panel)
        self.right_panel.setVisible(1)
        self.right_panel.validate()
    def update_from_gui(self):
        if self.pgui != None: self.pgui.update_from_gui()
        self.gd.title= self.title_field.text
        self.gd.plot_rows = string.atoi(self.row_field.text)
        self.gd.plot_columns = string.atoi(self.col_field.text)
        doc = self.init_ta.getDocument()
        txt = doc.getText(0,doc.getLength())
        if txt != None:
            self.gd.init_script_data.lines = string.split(txt,'\n')
        else:
            self.gd.init_script_data.lines= ['']
        doc = self.study_init_ta.getDocument()
        txt = doc.getText(0,doc.getLength())
        if txt != None:
            self.gd.study.init_script_data.lines = string.split(txt,'\n')
        else:
            self.gd.study.init_script_data.lines= ['']
        root = self.tree.getModel().getRoot()
        e = root.children()
        while e.hasMoreElements():
            el = e.nextElement()
            el.getUserObject().name = el.toString()
            e2 = el.children()
            while e2.hasMoreElements():
                el2 = e2.nextElement()
                el2.getUserObject().name = el2.toString()
    def update_to_gui(self):
        if self.pgui != None: self.pgui.update_to_gui()
        self.title_field.text = self.gd.title
        self.row_field.text = str(self.gd.plot_rows)
        self.col_field.text = str(self.gd.plot_columns)
        if len(self.gd.init_script_data.lines) > 0:
            self.init_ta.setText(string.join(self.gd.init_script_data.lines,'\n'))
        else:
            self.init_ta.setText('')
        if len(self.gd.study.init_script_data.lines) > 0:
            self.study_init_ta.setText(string.join(self.gd.study.init_script_data.lines,'\n'))
        else:
            self.study_init_ta.setText('')
    def common_action(self,evt):
        main_gui.set_cursor()
        if _debug :
            self.actions[evt.getSource().text](evt)
        else:
            try:
                self.actions[evt.getSource().text](evt)
            except:
                tb = sys.exc_traceback
                excinfo = sys.exc_info()
                source = evt.getSource()
                error_handler(tb,excinfo,source)
        main_gui.unset_cursor()
    def graph_action(self,evt):
        self.update_from_gui()
        self.gd.graph()
    def savegif_action(self,evt):
        file = VistaUtils.getDirectoryNameFromDialog(self, FileDialog.SAVE)
        if file == None: return
        self.update_from_gui()
        self.gd.saveimg(file,"gif")
    def savejpg_action(self,evt):
        file = VistaUtils.getDirectoryNameFromDialog(self, FileDialog.SAVE)
        if file == None: return
        self.update_from_gui()
        self.gd.saveimg(file,"jpg")
    def new_action(self,evt):
        self.gd = GraphData("")
        root = self.tree.getModel().getRoot()
        root.getUserObject().addGraphData(self.gd)
        self.tree.getModel().nodeStructureChanged(root)
        VistaUtils.getFrameForComponent(self).setTitle('Vista Plotter: Untitled')
    def save_action(self,evt):
        file = self.gd.file
        if file == None:
            file = VistaUtils.getFilenameFromDialog(self, FileDialog.SAVE, "xml", "XML")
            if file == None: return
        self.update_from_gui()
        self.gd.save(file)
        VistaUtils.getFrameForComponent(self).setTitle('Vista Plotter: ' +file)
    def saveas_action(self,evt):
        file = VistaUtils.getFilenameFromDialog(self, FileDialog.SAVE, "xml", "XML")
        if file == None: return
        self.update_from_gui()
        self.gd.save(file)
        VistaUtils.getFrameForComponent(self).setTitle('Vista Plotter: ' +file)
    def load_action(self,evt):
        file = VistaUtils.getFilenameFromDialog(self, FileDialog.LOAD, "xml", "XML")
        if file == None: return
        self.gd.load(file)
        self.update_to_gui()
        root = self.tree.getModel().getRoot()
        root.getUserObject().addGraphData(self.gd)
        self.tree.getModel().nodeStructureChanged(root)
        VistaUtils.getFrameForComponent(self).setTitle('Vista Plotter: ' +file)
    def getSelectedNode(self):
        item = self.tree.getSelectionPath()
        if item == None: return
        x = item.getPathComponent(item.getPathCount()-1)
        return x
    def new_data_action(self,evt):
        self.gd.addPlotData(PlotData(self.gd))
        root = self.tree.getModel().getRoot()
        self.tree.getModel().nodeStructureChanged(root)
    def clone_action(self,evt):
        x = self.getSelectedNode()
        if x == None: return
        self.gd.addPlotData(x.getUserObject()._mkclone())
        root = self.tree.getModel().getRoot()
        self.tree.getModel().nodeStructureChanged(root)
    def remove_action(self,evt):
        x = self.getSelectedNode()
        if x == None: return
        parent = x.getParent()
        if hasattr(parent.getUserObject(),'graph'):
            parent.remove(x)
            parent.getUserObject()._update()
        else:
            return
        self.tree.getModel().nodeStructureChanged(parent)
    def moveup_action(self,evt):
        x = self.getSelectedNode()
        if x == None: return
        i = self.gd.root.getIndex(x)
        if i == 0: return
        self.gd.root.remove(x)
        self.gd.root.insert(x,i-1)
        self.tree.setSelectionPath(TreePath(x.getPath()))
        self.tree.getModel().nodeStructureChanged(x.getParent())
    def movedown_action(self,evt):
        x = self.getSelectedNode()
        if x == None: return
        i = self.gd.root.getIndex(x)
        c = self.gd.root.getChildCount()
        if i == c-1 : return
        self.gd.root.remove(x)
        self.gd.root.insert(x,i+1)
        self.tree.setSelectionPath(TreePath(x.getPath()))
        self.tree.getModel().nodeStructureChanged(x.getParent())
    def add_action(self,menu,aname):
        if not self.actions.has_key(aname):
            raise "No key: " + aname + " in defined actions"
        item = JMenuItem(aname)
        item.actionPerformed = self.common_action
        menu.add(item)
    def show_options_dialog(self,evt):
        OptionsDialog(self.gd)
    def getMenuBar(self):
        om = JMenu("Options")
        self.add_action(om,"Set Options...")
        mbar = JMenuBar()
        mbar.add(om)
        return mbar
    def _testgui(self):
        fr = JFrame()
        cp = fr.getContentPane()
        cp.setLayout(BorderLayout())
        cp.add(self,BorderLayout.CENTER)
        fr.setJMenuBar(self.getMenuBar())
        fr.pack()
        fr.setLocation(100,100)
        fr.show()
class PlotGui(JPanel,TreeSelectionListener):
    def __init__(self,pd=PlotData(None)):
        self.tbl = JTable(pd)
        self.pre_ta = JTextArea(len(pd.pre_script_data.lines),50)
        self.init_ta = JTextArea(len(pd.init_script_data.lines),50)
        self.tbl2 = JTable(pd.expr_data)
        jsp = JScrollPane(self.tbl,\
                  JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\
                  JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS)
        jsp2 = JScrollPane(self.tbl2,\
                  JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\
                  JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS)
        jsp3 = JScrollPane(self.pre_ta,\
                   JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\
                   JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS)
        jsp4 = JScrollPane(self.init_ta,\
                   JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\
                   JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS)
        #
        self.axis_field = JTextField(20)
        self.title_field = JTextField(20)
        self.tw_field = JTextField(20)
        self.range_field = JTextField(20)
        ap = JPanel(); ap.setLayout(BorderLayout()); ap.add(self.axis_field)
        ap.setBorder(BorderFactory.createTitledBorder("Y Axis Label"))
        rwp = JPanel(); rwp.setLayout(BorderLayout()); rwp.add(self.range_field)
        rwp.setBorder(BorderFactory.createTitledBorder("Y Axis Range"))
        tp = JPanel(); tp.setLayout(BorderLayout()); tp.add(self.title_field)
        tp.setBorder(BorderFactory.createTitledBorder("Plot Title"))
        twp = JPanel(); twp.setLayout(BorderLayout()); twp.add(self.tw_field)
        twp.setBorder(BorderFactory.createTitledBorder("Time Window"))
        oppanel1 = JPanel(); oppanel1.setLayout(GridLayout(4,2))
        oppanel1.add(tp)
        oppanel1.add(ap)
        oppanel1.add(rwp)
        oppanel1.add(twp)
        #
        self.lfp, self.cfp, self.rfp = JTextField(20), JTextField(20), JTextField(20)
        lfpp = JPanel(); lfpp.setLayout(BorderLayout()); lfpp.add(self.lfp)
        lfpp.setBorder(BorderFactory.createTitledBorder('Left footer'))
        rfpp = JPanel(); rfpp.setLayout(BorderLayout()); rfpp.add(self.rfp)
        rfpp.setBorder(BorderFactory.createTitledBorder('Right footer'))
        cfpp = JPanel(); cfpp.setLayout(BorderLayout()); cfpp.add(self.cfp)
        cfpp.setBorder(BorderFactory.createTitledBorder('Center footer'))
        footer_panel= JPanel(); footer_panel.setLayout(GridLayout(1,3))
        footer_panel.add(lfpp);    footer_panel.add(cfpp);footer_panel.add(rfpp)
        #
        self.txt_loc_tbl = JTable(pd.plot_text)
        self.txt_loc_actions = { "New Row": self.tlnew_row_action, \
                     "Insert Row": self.tlinsert_action, \
                     "Remove Row": self.tlremove_action,\
                     "Move Row Up": self.tlmoveup_action, \
                     "Move Row Down" : self.tlmovedown_action\
                     }
        oppanel2 = JPanel()
        oppanel2.setLayout(BorderLayout())
        oppanel2.add(self.getTLMenuBar(),BorderLayout.NORTH)
        oppanel2.setBorder(BorderFactory.\
                   createTitledBorder("Plot Text & Locations"))
        oppanel2.add(JScrollPane(self.txt_loc_tbl),BorderLayout.CENTER)
        #oppanel2.add(footer_panel,BorderLayout.SOUTH)
        #
        self.comment_ta = JTextArea(len(pd.comment_data.lines),50)
        oppanel3 = JPanel(); oppanel3.setLayout(BorderLayout())
        oppanel3.add(JScrollPane(self.comment_ta),BorderLayout.CENTER)
        #
        self.update_to_gui()
        #
        self.actions = {"Save":self.save_action,\
                "Load":self.load_action,\
                "New":self.new_action,\
                "New Row": self.new_row_action,\
                "Insert Row": self.insert_action, \
                "Remove Row": self.remove_action,\
                "Move Row Up": self.moveup_action, \
                "Move Row Down" : self.movedown_action,\
                "Show Group": self.showgroup_action,\
                "Plot": self.plot_action,\
                "Simple Plot": self.simple_plot_action, \
                "Open DSS File": self.showdss_action, \
                "Save To DSS":self.savedss_action, \
                "Save To Text": self.savetxt_action\
                }
        self.expr_actions = { "New Row": self.enew_row_action, \
                      "Insert Row": self.einsert_action, \
                      "Remove Row": self.eremove_action,\
                      "Move Row Up": self.emoveup_action, \
                      "Move Row Down" : self.emovedown_action\
                      }
        #
        tpanel1 = JPanel(); tpanel1.setLayout(BorderLayout())
        tpanel1.add(jsp); tpanel1.add(self.getMenuBar(),BorderLayout.NORTH)
        tpanel1.setBorder(BorderFactory.createTitledBorder("Data Retrieval"));
        #
        tpanel3 = JPanel()
        tpanel3.setLayout(BorderLayout())
        tpanel3.add(jsp3)
        tpanel3.setBorder(BorderFactory.createTitledBorder("Data operations and scripts"));
        self.pre_panel = tpanel3
        #
        tpanel2 = JPanel(); tpanel2.setLayout(BorderLayout())
        tpanel2.add(jsp2); tpanel2.add(self.getEMenuBar(),BorderLayout.NORTH)
        tpanel2.setBorder(BorderFactory.createTitledBorder("Items to Plot/Tabulate/Export"));
        #
        tpanel4 = JPanel()
        tpanel4.setLayout(BorderLayout())
        tpanel4.add(jsp4)
        tpanel4.setBorder(BorderFactory.createTitledBorder("Initialization and Definitions"));
        self.init_panel = tpanel4
        #
        tpanel= JPanel(); tpanel.setLayout(GridLayout(4,1))
        tpanel.add(tpanel4)
        tpanel.add(tpanel1)
        tpanel.add(tpanel3)
        tpanel.add(tpanel2)
        self.main_panel = tpanel
        #
        tabpane = JTabbedPane(SwingConstants.TOP)
        tabpane.add(tpanel,"Main")
        #
        oppanel = JPanel(); oppanel.setLayout(GridLayout(3,1))
        oppanel.add(oppanel1)
        oppanel.add(oppanel2)
        oppanel.add(oppanel3)
        tabpane.add(oppanel,"Options")
        #
        self.setLayout(BorderLayout())
        self.add(tabpane,BorderLayout.CENTER)
    def update_from_gui(self):
        self.tbl.editingStopped(ChangeEvent(self.tbl))
        self.tbl2.editingStopped(ChangeEvent(self.tbl2))
        self.txt_loc_tbl.editingStopped(ChangeEvent(self.txt_loc_tbl))
        pd = self.tbl.getModel()
        if pd == None: return
        pd.expr_data = self.tbl2.getModel()
        pd.plot_text = self.txt_loc_tbl.getModel()
        doc = self.pre_ta.getDocument()
        txt = doc.getText(0,doc.getLength())
        if txt != None:
            pd.pre_script_data.lines = string.split(txt,'\n')
        else:
            pd.pre_script_data.lines= ['']
        doc = self.init_ta.getDocument()
        txt = doc.getText(0,doc.getLength())
        if txt != None:
            pd.init_script_data.lines = string.split(txt,'\n')
        else:
            pd.init_script_data.lines= ['']
        doc = self.comment_ta.getDocument()
        txt = doc.getText(0,doc.getLength())
        if txt != None:
            pd.comment_data.lines = string.split(txt,'\n')
        else:
            pd.comment_data.lines= ['']
        pd.axisLabel = self.axis_field.text
        pd.title = self.title_field.text
        pd.tw = self.tw_field.text
        pd.range = self.range_field.text
        pd.footer.left = self.lfp.text
        pd.footer.center = self.cfp.text
        pd.footer.right = self.rfp.text
    def update_to_gui(self):
        self.tbl.editingStopped(ChangeEvent(self.tbl))
        self.tbl2.editingStopped(ChangeEvent(self.tbl))
        self.txt_loc_tbl.editingStopped(ChangeEvent(self.txt_loc_tbl))
        pd = self.tbl.getModel()
        if pd == None: return
        self.tbl2.setModel(pd.expr_data)
        self.tbl2.sizeColumnsToFit(-1)
        self.txt_loc_tbl.setModel(pd.plot_text)
        self.txt_loc_tbl.sizeColumnsToFit(-1)
        if len(pd.pre_script_data.lines) > 0:
            self.pre_ta.setText(string.join(pd.pre_script_data.lines,'\n'))
        else:
            self.pre_ta.setText('')
        if len(pd.init_script_data.lines) > 0:
            self.init_ta.setText(string.join(pd.init_script_data.lines,'\n'))
        else:
            self.init_ta.setText('')
        if len(pd.comment_data.lines) > 0:
            self.comment_ta.setText(string.join(pd.comment_data.lines,'\n'))
        else:
            self.comment_ta.setText('')
        self.axis_field.text = pd.axisLabel
        self.title_field.text = pd.title
        self.tw_field.text = pd.tw
        self.range_field.text = pd.range
        self.lfp.text = pd.footer.left
        self.cfp.text = pd.footer.center
        self.rfp.text = pd.footer.right
    def valueChanged(self,evt):
        tnode = evt.getPath().getLastPathComponent()
        uobj = tnode.getUserObject()
        #print tnode,uobj
        if uobj == None: return
        if not isinstance(uobj, DefaultTableModel): return
        self.update_from_gui()
        self.tbl.setModel(uobj)
        self.update_to_gui()
        self.tbl.sizeColumnsToFit(-1)
    def common_action(self,evt):
        main_gui.set_cursor()
        if _debug:
            self.actions[evt.getSource().text](evt)
        else:
            try:
                self.actions[evt.getSource().text](evt)
            except:
                tb = sys.exc_traceback
                excinfo = sys.exc_info()
                source = evt.getSource()
                error_handler(tb,excinfo,source)
        main_gui.unset_cursor()
    def savedss_action(self,evt):
        self.update_from_gui()
        file = VistaUtils.getFilenameFromDialog(self, FileDialog.SAVE, "dss", "DSS")
        if file == None: return
        self.tbl.getModel().writedss(file)
    def savetxt_action(self,evt):
        self.update_from_gui()
        file = VistaUtils.getFilenameFromDialog(self, FileDialog.SAVE, "txt", "Text")
        if file == None: return
        self.tbl.getModel().writetxt(file)
    def _mkgraph(self,pl):
        gr = Graph()
        gr.addPlot(pl)
        xplot._mkgraph(gr)
    def simple_plot_action(self,evt):
        self.update_from_gui()
        self._mkgraph(self.tbl.getModel().plot(1))
    def plot_action(self,evt):
        self.update_from_gui()
        self._mkgraph(self.tbl.getModel().plot())
    def showgroup_action(self,evt):
        self.update_from_gui()
        self.tbl.getModel().show_raw_group()
    def showdss_action(self,evt):
        file = VistaUtils.getFilenameFromDialog(self, FileDialog.LOAD, "dss", "DSS")
        if file == None: return
        GroupFrame(opendss(file))
    def new_action(self,evt):
        self.tbl.setModel(PlotData(main_gui.sgui.ggui.current_gd))
        self.tbl.sizeColumnsToFit(-1)
    def load_action(self,evt):
        file = VistaUtils.getFilenameFromDialog(self, FileDialog.LOAD, "xml", "XML")
        if file == None: return
        self.tbl.getModel().load(file)
        self.update_to_gui()
        self.tbl.sizeColumnsToFit(-1)
        self.tbl2.sizeColumnsToFit(-1)
    def save_action(self,evt):
        file = VistaUtils.getFilenameFromDialog(self, FileDialog.SAVE, "xml", "XML")
        if file == None: return
        self.update_from_gui()
        self.tbl.getModel().save(file)
        self.tbl.sizeColumnsToFit(-1)
        self.tbl2.sizeColumnsToFit(-1)
    def new_row_action(self,evt):
        self.tbl.getModel().addRow(['','',''])
    def insert_action(self,evt):
        row = self.tbl.getSelectedRow()
        if row == -1:
            row = self.tbl.getModel().getRowCount()-1
        self.tbl.getModel().insertRow(row, ['','',''])
    def remove_action(self,evt):
        rows = self.tbl.getSelectedRows()
        if rows == None or len(rows) == 0:
            JOptionPane.showMessageDialog(self,"Message","Select a row first!",\
                          JOptionPane.PLAIN_MESSAGE)
            return
        ndeleted = 0
        nrows = len(rows)
        for i in range(nrows):
            ci = rows[i] - ndeleted
            if ci >= self.tbl.getModel().getRowCount(): continue
            self.tbl.getModel().removeRow(ci)
            ndeleted = ndeleted + 1
    def moveup_action(self,evt):
        row = self.tbl.getSelectedRow()
        if row <= 0: return
        self.tbl.getModel().moveRow(row,row,row-1)
    def movedown_action(self,evt):
        row = self.tbl.getSelectedRow()
        if row == self.tbl.getModel().getRowCount(): return
        self.tbl.getModel().moveRow(row,row,row+1)
    def enew_row_action(self,evt):
        self.tbl2.getModel().addRow(['','','','','',''])
    def einsert_action(self,evt):
        row = self.tbl2.getSelectedRow()
        if row == -1:
            row = self.tbl2.getModel().getRowCount()-1
        self.tbl2.getModel().insertRow(row, ['','','','','',''])
    def eremove_action(self,evt):
        rows = self.tbl2.getSelectedRows()
        if rows == None or len(rows) == 0:
            JOptionPane.showMessageDialog(self,"Message","Select a row first!",\
                          JOptionPane.PLAIN_MESSAGE)
            return
        ndeleted = 0
        nrows = len(rows)
        for i in range(nrows):
            ci = rows[i] - ndeleted
            if ci >= self.tbl2.getModel().getRowCount(): continue
            self.tbl2.getModel().removeRow(ci)
            ndeleted = ndeleted + 1
    def emoveup_action(self,evt):
        row = self.tbl2.getSelectedRow()
        if row <= 0: return
        self.tbl2.getModel().moveRow(row,row,row-1)
    def emovedown_action(self,evt):
        row = self.tbl2.getSelectedRow()
        if row == self.tbl2.getModel().getRowCount(): return
        self.tbl2.getModel().moveRow(row,row,row+1)
    def tlnew_row_action(self,evt):
        self.txt_loc_tbl.getModel().addRow(['','','','','',''])
    def tlinsert_action(self,evt):
        row = self.txt_loc_tbl.getSelectedRow()
        if row == -1:
            row = self.txt_loc_tbl.getModel().getRowCount()-1
        self.txt_loc_tbl.getModel().insertRow(row, ['','','','','',''])
    def tlremove_action(self,evt):
        rows = self.txt_loc_tbl.getSelectedRows()
        if rows == None or len(rows) == 0:
            JOptionPane.showMessageDialog(self,"Message","Select a row first!",\
                          JOptionPane.PLAIN_MESSAGE)
            return
        ndeleted = 0
        nrows = len(rows)
        for i in range(nrows):
            ci = rows[i] - ndeleted
            if ci >= self.txt_loc_tbl.getModel().getRowCount(): continue
            self.txt_loc_tbl.getModel().removeRow(ci)
            ndeleted = ndeleted + 1
    def tlmoveup_action(self,evt):
        row = self.txt_loc_tbl.getSelectedRow()
        if row <= 0: return
        self.txt_loc_tbl.getModel().moveRow(row,row,row-1)
    def tlmovedown_action(self,evt):
        row = self.txt_loc_tbl.getSelectedRow()
        if row == self.txt_loc_tbl.getModel().getRowCount(): return
        self.txt_loc_tbl.getModel().moveRow(row,row,row+1)
    def add_action(self,menu,aname):
        if not self.actions.has_key(aname):
            raise "No key: " + aname + " in defined actions"
        item = JMenuItem(aname)
        item.actionPerformed = self.common_action 
        menu.add(item)
    def eadd_action(self,menu,aname):
        if not self.expr_actions.has_key(aname):
            raise "No key: " + aname + " in defined actions"
        item = JMenuItem(aname)
        item.actionPerformed = self.expr_actions[aname]
        menu.add(item)
    def tladd_action(self,menu,aname):
        if not self.txt_loc_actions.has_key(aname):
            raise "No key: " + aname + " in defined actions"
        item = JMenuItem(aname)
        item.actionPerformed = self.txt_loc_actions[aname]
        menu.add(item)
    def getMenuBar(self):
        em = JMenu("Edit")
        self.add_action(em,"New Row")
        self.add_action(em,"Insert Row")
        em.addSeparator()
        self.add_action(em,"Move Row Up")
        self.add_action(em,"Move Row Down")
        em.addSeparator()
        self.add_action(em,"Remove Row")
        dm = JMenu("Data")
        self.add_action(dm,"Show Group")
        mbar = JMenuBar()
        mbar.add(em)
        mbar.add(dm)
        return mbar
    def getEMenuBar(self):
        em = JMenu("Edit")
        self.eadd_action(em,"New Row")
        self.eadd_action(em,"Insert Row")
        em.addSeparator()
        self.eadd_action(em,"Move Row Up")
        self.eadd_action(em,"Move Row Down")
        em.addSeparator()
        self.eadd_action(em,"Remove Row")
        mbar = JMenuBar()
        mbar.add(em)
        return mbar
    def getTLMenuBar(self):
        tlm = JMenu("Edit")
        self.tladd_action(tlm,"New Row")
        self.tladd_action(tlm,"Insert Row")
        tlm.addSeparator()
        self.tladd_action(tlm,"Move Row Up")
        self.tladd_action(tlm,"Move Row Down")
        tlm.addSeparator()
        self.tladd_action(tlm,"Remove Row")
        mbar = JMenuBar()
        mbar.add(tlm)
        return mbar
    def _testgui(self):
        fr = JFrame()
        cp = fr.getContentPane()
        cp.setLayout(BorderLayout())
        cp.add(self,BorderLayout.CENTER)
        fr.setJMenuBar(self.getMenuBar())
        fr.pack()
        fr.setLocation(100,100)
        fr.show()
#
if __name__ == '__main__' or __name__ == 'main':
    import getopt
    optlist, args = getopt.getopt(sys.argv[1:],'f:d')
    file = None
    for option in optlist:
        if option[0] == '-f':
            file = option[1]
        elif option[0] == '-d':
            _debug = 1
        else:
            pass
    MainGui(file)
    print 'Started MainGui'
#
