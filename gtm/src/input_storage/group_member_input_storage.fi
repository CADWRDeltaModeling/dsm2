       !>@ingroup fortran
       !>@defgroup group_member group_member
       !>@{
        
       !> Clear the buffer of all stored data of type group_member 
       subroutine group_member_clear_buffer()
         !DEC$ ATTRIBUTES ALIAS:'_group_member_clear_buffer_f' :: group_member_clear_buffer_f
         implicit none
         call group_member_clear_buffer_f()
         return
       end subroutine

       !> Query the number of records in storage buffer of type group_member
       integer function group_member_buffer_size()
         !DEC$ ATTRIBUTES ALIAS:'_group_member_buffer_size_f' :: group_member_buffer_size_f
          implicit none
          integer, external :: group_member_buffer_size_f
          group_member_buffer_size = group_member_buffer_size_f()
          return
       end function
       
       !> write group_member data to buffer
       subroutine group_member_append_to_buffer(group_name,member_type,pattern,ierror)
         !DEC$ ATTRIBUTES ALIAS:'_group_member_append_to_buffer_f' :: group_member_append_to_buffer_f
         implicit none
         integer, intent(out) :: ierror         
               character(len=32), intent(in) :: group_name
       character(len=16), intent(in) :: member_type
       character(len=256), intent(in) :: pattern
         call group_member_append_to_buffer_f(group_name,member_type,pattern,ierror)
         return
       end subroutine
       
       !> Query the number of records in hdf5 of type group_member
       subroutine group_member_number_rows_hdf5(file_id, nrecords,ierror)
         !DEC$ ATTRIBUTES ALIAS:'_group_member_number_rows_hdf5_f' :: group_member_number_rows_hdf5_f
          use hdf5, only: HID_T,HSIZE_T
          implicit none
          integer :: nrecords
          integer(HSIZE_T) :: nrec = 0
          integer(HID_T),intent(in)::file_id
          integer, intent(out) :: ierror
          call group_member_number_rows_hdf5_f(file_id,nrec,ierror)
          nrecords = nrec
          return
       end subroutine



       !> Query row of data from buffer of type group_member
       subroutine group_member_query_from_buffer(row, group_name,member_type,pattern,ierror)
         !DEC$ ATTRIBUTES ALIAS:'_group_member_query_from_buffer_f' :: group_member_query_from_buffer_f
          implicit none
                character(len=32), intent(out) :: group_name
       character(len=16), intent(out) :: member_type
       character(len=256), intent(out) :: pattern
          integer row
          integer, intent(out) :: ierror
          call group_member_query_from_buffer_f(row, &
                    group_name,member_type,pattern,ierror)
          return
       end subroutine

       !> Prioritize buffer by layers, delete unused items and sort
       subroutine group_member_prioritize_buffer(ierror)
         !DEC$ ATTRIBUTES ALIAS:'_group_member_prioritize_buffer_f' :: group_member_prioritize_buffer_f
	      implicit none
          integer, intent(out) :: ierror          
          call group_member_prioritize_buffer_f(ierror)
       end subroutine

       !> Write a buffer of group_member data to buffer 
       !! @param file_id handle to hdf5 file
       subroutine group_member_write_buffer_to_hdf5(file_id, ierror)
         !DEC$ ATTRIBUTES ALIAS:'_group_member_write_buffer_to_hdf5_f' :: group_member_write_buffer_to_hdf5_f
         use hdf5, only: HID_T
         implicit none
         integer(HID_T), intent(in) :: file_id
         integer, intent(out) :: ierror         
         call group_member_write_buffer_to_hdf5_f(file_id,ierror)
         return
       end subroutine

       !> Read a buffer of group_member data from hdf5 to buffer 
       subroutine group_member_read_buffer_from_hdf5(file_id,ierror)
         !DEC$ ATTRIBUTES ALIAS:'_group_member_read_buffer_from_hdf5_f' :: group_member_read_buffer_from_hdf5_f
         use hdf5, only: HID_T
         implicit none
         integer(HID_T), intent(in) :: file_id
         integer, intent(out) :: ierror         
         call group_member_read_buffer_from_hdf5_f(file_id,ierror)
         return
       end subroutine

       subroutine group_member_write_buffer_to_text(filename,append,ierror)
         !DEC$ ATTRIBUTES ALIAS:'_group_member_write_buffer_to_text_f' :: group_member_write_buffer_to_text_f
         implicit none
         integer, intent(out) :: ierror
         character*(*) filename
         logical append
         call group_member_write_buffer_to_text_f(filename, append,ierror)
         return
       end subroutine     
       !@}



