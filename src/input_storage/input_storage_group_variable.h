#ifndef group_variable_STORAGE_H__
#define group_variable_STORAGE_H__
/**
WARNING: THIS FILE WAS AUTOMATICALLY GENERATED USING A SCRIPT AND A TEMPLATE  
DO NOT CHANGE THE CODE HERE. 
IF THE CODE IS INCORRECT, FIX THE TEMPLATE OR SCRIPT
IF YOU WANT TO ADD NEW ITEMS, ADD THEM TO THE SCRIPT INPUT FILE AND RUN IT AFRESH
*/ 
#define _CRT_SECURE_NO_DEPRECATE  // viz studio deprecation warnings
#include "hdf5.h"
#include "hdf5_hl.h"
#include "hdf_storage.h"
#include "HDFTableManager.h"
#include "TableDescription.h"
#include "TableItemFunctors.h"
#include "boost/tuple/tuple_comparison.hpp"
#include "boost/tuple/tuple_io.hpp"
#include<iostream>
#include<vector>
#include<algorithm>
#include<string.h>
#include<iostream>


using namespace std;
using namespace boost;

/** Structure representing input of type group_variable.
    This class is autogenerated by a script given
    a description of the object
    \ingroup userdata
*/
class group_variable
{
public:

  /** Data type group_variable, default constructor */  
  typedef const tuple<const std::string,const std::string,const std::string>  identifier_type;

  group_variable() :
    value(-901.0),
    used(true),
    layer(0)
  {
    fill_n(group_name,32,'\0');
    fill_n(constituent,16,'\0');
    fill_n(variable,16,'\0');
  };

  /** Construct a group_variable with actual data values */
  group_variable(const  char a_group_name[32],const  char a_constituent[16],const  char a_variable[16],const double & a_value, bool a_used=true, int a_layer = 0) :
    value(a_value),
    used(a_used),
    layer(a_layer)
  {
    memcpy(group_name,a_group_name,32);
    memcpy(constituent,a_constituent,16);
    memcpy(variable,a_variable,16);  
  }
  
  /**Copy constructor) 
   */
  group_variable (const group_variable & other) :
    value(other.value),
    used(other.used),
    layer(other.layer)
  {
    memcpy(group_name,other.group_name,32);
    memcpy(constituent,other.constituent,16);
    memcpy(variable,other.variable,16);  
  }
  
  /** Identifier that distinguishes whether two entries are distinct */
  identifier_type identifier()  const
  {  
     return identifier_type( group_name,constituent,variable );
  }
  
  void set_identifier(identifier_type identifier)
  {
     memcpy(group_name,identifier.get<0>().c_str(),32);
      memcpy(constituent,identifier.get<1>().c_str(),16);
      memcpy(variable,identifier.get<2>().c_str(),16);
  }
  
  /** Parent object class name.
      If this is a child item belonging to a parent, returns
      the name of the parent class. Otherwise returns the name
      of this class.
  */
  group_variable::identifier_type parent_identifier()  const
  {
     return group_variable::identifier_type( group_name,constituent,variable );
  }

  /** Return the version/layer number of the parent object */ 
  int parent_version()  const
  {
    vector<group_variable>& pbuf = HDFTableManager<group_variable>::instance().buffer();
    group_variable parent;
    parent.set_identifier(parent_identifier());
    vector<group_variable>::iterator loc = lower_bound(pbuf.begin(),
                                                pbuf.end(),
                                                parent,
                                                identifier_compare<group_variable>());
    bool found = (loc!=pbuf.end()) && loc->identifier() == parent.identifier();    
    if (found && loc->used){ return loc->layer; }
    else{ return -1; }
  }

  /** Return true if this layer of this object matches the layer of the parent object that will be use in the model.*/
  bool parent_valid()  const
  {
    return this->layer == parent_version();
  }

  /** Less-than operator based on the identifier plus (for parent objects) layer number*/  
  bool operator< (const group_variable & other) const
  {
     
     if(this->identifier() != other.identifier())
	 {
		 return this->identifier() < other.identifier();
	 }
	 // todo: make this a policy
	 bool layerOutranks = (this->layer == 0 && other.layer != 0) ||
		                  (this->layer > other.layer && other.layer != 0);
     return layerOutranks;

  }

  /** Less-than operator based on the identifier plus (for parent objects) layer number*/  
  bool operator== (const group_variable & other) const
  {
     return ((*this < other ) || (other < *this)) ? false : true;
  }
  
  /** Assignment that includes all the data plus the used and layer fields */
  group_variable& operator=(const group_variable& rhs)
  {
    strcpy(this->group_name,rhs.group_name);
    strcpy(this->constituent,rhs.constituent);
    strcpy(this->variable,rhs.variable);
    this->value=rhs.value;
    used = rhs.used;
    layer = rhs.layer;
    return *this;
  }

  /** Return the class name of this object (group_variable) */
  string objectName() const
  { 
    return "group_variable"; 
  }

  
  char group_name[32];
  char constituent[16];
  char variable[16];
  double value;
  /** indicator that the entry is used (true if not marked deleted by user)*/
  bool used;  
  /** layer (version number) of this entry */
  int layer;
};

typedef HDFTableManager<group_variable> group_variable_table;

hid_t string_type(size_t n);

TableDescription group_variable_table_description();

istream& operator>> (istream& stream, group_variable & obj);
ostream& operator<<(ostream & stream, const group_variable & obj);



////////// FORTRAN-LINKABLE API //////////
#define FCALL extern "C"


/**
  Clear the buffer, compatible with fortran
*/  
FCALL void group_variable_clear_buffer_f();

/** query number of records being stored in buffer */
FCALL int group_variable_buffer_size_f();


/** append to buffer, compatible with fortran, returns new size*/
FCALL void group_variable_append_to_buffer_f(const  char a_group_name[32],const  char a_constituent[16],const  char a_variable[16],const double * a_value, int * ierror, 
              const int group_name_len,const int constituent_len,const int variable_len);
  
/** both makes the table and writes the contents of the buffer to it */
FCALL void group_variable_write_buffer_to_hdf5_f(const hid_t* file_id, int* ierror);

/** reads the table in from a file into the buffer*/
FCALL void group_variable_read_buffer_from_hdf5_f(const hid_t* file_id, int* ierror);

/** query size information about the table in hdf5
*/
FCALL void group_variable_number_rows_hdf5_f(const hid_t* file_id, hsize_t* nrecords, int* ierror);


/** get one row worth of information from the buffer */
FCALL void group_variable_query_from_buffer_f(size_t* row, 
                         char a_group_name[32], char a_constituent[16], char a_variable[16],double * a_value, int * ierror, 
              int group_name_len,int constituent_len,int variable_len);
/**
  prioritize buffer by layers, delete unused items and sort
  */
FCALL void group_variable_prioritize_buffer_f(int* ierror);
/**
   write buffer to the given text file. File will be appended if exists and append flag is set to true.
   otherwise the file will be created or overwritten.
 */
FCALL void group_variable_write_buffer_to_text_f(const char* file, const bool* append, int* ierror, int filelen);


#endif

