import sysimport configimport calendarimport timeimport jarray,mathimport vutilsimport interpolator.ConservativeSplineimport conservefrom vista.time import TimeFactory, TimeInterval,Timefrom vista.set import DataReference, Unitsfrom vdss import opendss,findpath,writedss,findfrom vtimeseries import timewindow,timeintervalfrom config import getAttr,setConfigVarsfrom calsim_study_fpart import calsim_study_fpartfrom planning_time_window import prepro_windowfrom jarray import zeros,arrayfrom vista.set import RegularTimeSeries,DataSetAttr,DataType,Constantsfrom vdisplay import plot,tabulatefrom vmath import per_avg, per_max, mov_avgfrom vutils import Constants, RegularTimeSeriesdef path_check(f,dsspath):	paths = findpath(f,dsspath)	if not paths or len(paths)>1:		print "File: %s" % calsimfile		raise "Path %s not found or not unique" % dsspath	return paths[0]def transpose_day(var_list):# reads an array of bparts of 31 calsim monnthly timeseries and tranposes data in to single daily timeseries# returns array of transposed daily timeseries data# "varlist" => array of bparts of 31 CALSIM monthly timeseries data (e.g QSAC169_1DV, QSAC169_2DV etc)	ds = {}	for i in range(len(var_list)):		paths = find(CALSIM,var_list[i],'b')		if not paths or len(paths)>1:			print "File: %s" % calsimfile			raise "Path with bpart %s not found or not unique" % var_list[i]		ref1 = paths[0]		ref2 = DataReference.create(ref1,tw_mon)		ds[i] = ref2.getData()	ts_day = zeros(29950,'d')	daysin = [31,30,31,31,28,31,30,31,30,31,31,30]	day_c = 0	mon_c = 0	for year in range(1922,2004,1):		daysin[4]=28		if (year/4.0 - year/4) == 0.0:			daysin[4]=29   		for mon in daysin:			for day in range(mon):				ds_temp = ds[day]				ts_day[day_c] = ds_temp[mon_c].getY()				day_c = day_c + 1			mon_c = mon_c + 1	return ts_daydef accumulate_mon(ds_day):# reads an array of daily timeseries data and accumulates over each month# returns rts of monthly accumulated timeseries data# "ds_day" => array of daily timeseries data	ds_mon = zeros(984,'d')	daysin = [31,30,31,31,28,31,30,31,30,31,31,30]	day_c = 0	mon_c = 0	for year in range(1922,2004,1):		daysin[4]=28		if (year/4.0 - year/4) == 0.0:			daysin[4]=29   		for mon in daysin:			sum = 0			for day in range(mon):				sum = sum + ds_day[day_c]				day_c = day_c + 1			ds_mon[mon_c] = sum			mon_c = mon_c + 1	rts = RegularTimeSeries('',sdate_mon,'1MON',ds_mon,attr)	return rtsdef accumulate_day(ds_day):# reads an array of daily timeseries data and accumulates over each day and resets every month# returns an array of daily accumulated timeseries data# "ds_day" => array of daily timeseries data	ts_day = zeros(len(ds_day),'d')	daysin = [31,30,31,31,28,31,30,31,30,31,31,30]	day_c = 0	for year in range(1922,2004,1):		daysin[4]=28		if (year/4.0 - year/4) == 0.0:			daysin[4]=29   		for mon in daysin:			sum = 0			for day in range(mon):				sum = sum + ds_day[day_c]				ts_day[day_c] = sum				day_c = day_c + 1	return ts_daydef daily_pattern(Qsim_mon,Qobs_day,bpart):# reads monthly and daily timeseries data, and adjusts daily data in each month to # maintaing same volume as monthly data# "Qsim_mon" => monthly regular time series# "Qobs_day" => daily regular time series# "bpart" => B-part of the variable	Qobs_mon = per_avg(Qobs_day,'1MON')	fac = zeros(len(Qsim_mon),'d')	for n in range(len(Qsim_mon)):		if Qobs_mon[n].getY() == 0:			fac[n] = Qsim_mon[n].getY()/(Qobs_mon[n].getY() + 0.000000001)		else:			fac[n] = Qsim_mon[n].getY()/Qobs_mon[n].getY()	fac_monrts = RegularTimeSeries('',sdate_mon,'1MON',fac,attr)#	writedss(calsimqafile,'/COMPUTED/'+bpart+'/ADJ-FACTOR//1MON/DAILY_PATTERN/',fac_monrts) # Uncomment for QA/QC	fac_day = vutils.interpolate(fac_monrts,'1DAY')	Qmod_day = zeros(len(fac_day),'d')	for n in range(len(fac_day)):		Qmod_day[n] = Qobs_day[n].getY()*fac_day[n].getY()	return Qmod_daydef cap_check(daily_ds,CAP):# reads an array of daily timeseries and CAP value. computes the monthly max and compares with the # given CAP value. If the monthly max is greater than CAP, all the daily values in that month are# equated to the monthly average.# "daily_ds" => array of daily timeseries data# "CAP" => maximum value above which daily pattern is removed.	daily_rts = RegularTimeSeries('',sdate_day,'1DAY',daily_ds,attr)	daily_max = per_max(daily_rts,'1MON')	daily_avg = per_avg(daily_rts,'1MON')	daily_max_inter = vutils.interpolate(daily_max,'1DAY')	daily_avg_inter = vutils.interpolate(daily_avg,'1DAY')	daily_output = zeros(len(daily_ds),'d')	cap_flag = zeros(len(daily_ds),'d')	for n in range(len(daily_ds)):		if daily_max_inter[n].getY() > CAP:			daily_output[n] = daily_avg_inter[n].getY()			cap_flag[n] = 1		else:			daily_output[n] = daily_ds[n]			cap_flag[n] = 0	return daily_output, cap_flagdef flag_check(daily_ds,flag_ds):# reads arrays of daily timeseries and flag. If the flag is greater than 0 all the daily# values in that month are equated to the monthly average.# "daily_ds" => array of daily timeseries data# "flag_ds" => array of daily flag	daily_rts = RegularTimeSeries('',sdate_day,'1DAY',daily_ds,attr)	daily_avg = per_avg(daily_rts,'1MON')	daily_avg_inter = vutils.interpolate(daily_avg,'1DAY')	daily_output = zeros(len(daily_ds),'d')	for n in range(len(daily_ds)):		if flag_ds[n] > 0:			daily_output[n] = daily_avg_inter[n].getY()		else:			daily_output[n] = daily_ds[n]	return daily_outputdef smooth_day(monthly,daily,avgwindow,ndays,bpart):# reads daily regular timeseries and smoothes data for the specified daywindow from the end of month.# after smoothing the records, readjusts volume for each month based on monthly regular timeseries.# "monthly" => monthly regular timeseries# "daily" => daily regular timeseries# "avgwindow" => number of days forward and Backward to be averaged# ..............(e.g. avgwindow = 4 - averages over 9 days including current day)# "ndays" => number of days at the begining and end of each month the averaging is done# ..........(e.g. ndays = 4 - averages are performed for first and last 4 days of each month 	daily_BMA = mov_avg(daily,avgwindow,0)	daily_FMA = mov_avg(daily,0,avgwindow)	daily_avg = (daily_BMA + daily_FMA)/2	daily_out = zeros(len(daily),'d')	daysin = [31,30,31,31,28,31,30,31,30,31,31,30]	day_c = 0	mon_c = 0	for year in range(1922,2004,1):		daysin[4]=28		if (year/4.0 - year/4) == 0.0:			daysin[4]=29   		for mon in daysin:			sum = 0			for day in range(mon):				if mon_c == 0:					ind1 = - 1					ind2 = mon - ndays				elif mon_c == 983:					ind1 = endc + ndays					ind2 = endc + mon + 1				else:					ind1 = endc + ndays					ind2 = endc + mon - ndays + 1				if day_c <= ind1 or day_c >= ind2:					daily_out[day_c] = daily_avg[day_c].getY()				else:					daily_out[day_c] = daily[day_c].getY()				day_c = day_c + 1			endc = day_c - 1			mon_c = mon_c + 1	daily_rts = RegularTimeSeries('',sdate_day,'1DAY',daily_out,attr)	daily_out = daily_pattern(monthly,daily_rts,bpart)	return daily_outdef error_check(Qsim_mon,Qobs_ds,bpart,flag):# reads an array of daily or monthly computed timeseries and compares with monthly simulated# regular timeseries and computes the error statistics# "Qsim_mon" => monthly regular timeseries (CALSIM)# "Qobs_ds" => array of daily or monthly timeseries # "bpart" => B-part of the variable# "flag" => 1 if daily, 0 if monthly	if flag == 1:		Qobs_rts = RegularTimeSeries('',sdate_day,'1DAY',Qobs_ds,attr)		Qobs_mon = per_avg(Qobs_rts,'1MON')	error = zeros(len(Qsim_mon),'d')	nevent = 0	sum = 0	for n in range(len(Qsim_mon)):		if flag == 1:			Daily = Qobs_mon[n].getY()		elif flag == 0:			Daily = Qobs_ds[n].getY()		else:			raise "Invalid Flag for error check (should be 1 or 0)"		error[n] = Qsim_mon[n].getY() - Daily		sum = sum + error[n]		if error[n] < -0.001 or error[n] > 0.001:			nevent = nevent + 1	avg = sum/len(Qsim_mon)	print "\n*** Monthly Mass Balance check for : %s ***" % bpart	print "    Number of months when daily"	print "    mapped data are greater than"	print "    or less than CALSIM                     : %6.0d " % nevent	print "    Mean monthly error                      : %10.3f " % avg	print "    Maximum monthly error                   : %10.3f " % max(error)	print "    Minimum monthly error                   : %10.3f " % min(error)def extend_flow(nodes_to_extend):#	Copying WY1922 data to WY1921 for allowing to preprocessing and running DSM2#	from 01Jan1921.	tw=timewindow("01OCT1921 2400 - 30SEP1922 2400")	for bpart in nodes_to_extend:  		paths = find(CALSIMDAILY,bpart,'b')		if not paths or len(paths)>1:			print "File: %s" % calsimdailyfile			raise "Path with bpart %s not found or not unique" % bpart[1:-1]		print bpart[1:-1]		ref1 = paths[0]		ref=DataReference.create(ref1,tw)		daily=ref.getData()		itr = daily.getIterator()		d=zeros(len(daily),'d')		count=0		while not itr.atEnd():			el = itr.getElement()			d[count] = el.getY()			count = count + 1			itr.advance()		stime = "01OCT1920 2400" 		rts = RegularTimeSeries('',stime,'1DAY',d,attr)		writedss(calsimdailyfile,ref.getPathname().toString(),rts)def tafpm2cfs():# reads an array of daily timeseries data and accumulates over each month# returns array of monthly accumulated timeseries data# "ds_day" => array of daily timeseries data	mon_ds = zeros(984,'d')	daysin = [31,30,31,31,28,31,30,31,30,31,31,30]	day_c = 0	mon_c = 0	for year in range(1922,2004,1):		daysin[4]=28		if (year/4.0 - year/4) == 0.0:			daysin[4]=29   		for mon in daysin:			mon_ds[mon_c] = (1000.0 * 43560.0)/(86400.0 * mon)			mon_c = mon_c + 1	return mon_ds		# Main Codeinfile = sys.argv[1]setConfigVars(infile)   # DSS Filenamescalsimfile      = getAttr("CALSIMFILE")dayflowfile     = getAttr("DAYFLOW_FILE")sjrnopatfile    = getAttr("SJR_NOPATTERN_FILE")calsimdailyfile = getAttr("CALSIM_DAILY_FILE")calsimqafile    = getAttr("CALSIM_QA_FILE")calsimsvfile = "%ssv.DSS" % calsimfile[:-6]CALSIM      = opendss(calsimfile)CALSIMSV    = opendss(calsimsvfile)SJRNOPAT    = opendss(sjrnopatfile)DAYFLOWADJ  = opendss(dayflowfile)CALSIMDAILY = opendss(calsimdailyfile)CALSIMQA    = opendss(calsimqafile)tw_mon = timewindow("31OCT1921 2400 - 30SEP2003 2400")   # For monthly TS inputs/outputstw_day = timewindow("01OCT1921 2400 - 30SEP2003 2400")   # For daily TS inputs/outputssdate_mon = '31OCT1921 2400' sdate_day = '01OCT1921 2400'# Global ParametersJONES_CAP = 4600.0BANKS_CAP = 10300.0TOT_CAP = JONES_CAP + BANKS_CAPCFS2TAFPD = 1.983471074# Part Namesapart = 'CALSIM-DAILY'fpart = getAttr("CALSIMSTUDY_MODIFIED")fpart_sjr = getAttr("DSM2MODIFIER")fpart_calsim = getAttr("CALSIMSTUDY_ORIGINAL")attr = DataSetAttr(DataType.REGULAR_TIME_SERIES,"TIME",'CFS',"",'PER-AVER')# Step 1 - SACR at Freeport, NDD Daily Flow Patterning ####################################print "\nPerforming Daily Mapping of Sacramento River at Freeport Flow.."QSAC169_list = ["QSAC169_1DV","QSAC169_2DV","QSAC169_3DV","QSAC169_4DV","QSAC169_5DV", \				"QSAC169_6DV","QSAC169_7DV","QSAC169_8DV","QSAC169_9DV","QSAC169_10DV", \				"QSAC169_11DV","QSAC169_12DV","QSAC169_13DV","QSAC169_14DV","QSAC169_15DV", \				"QSAC169_16DV","QSAC169_17DV","QSAC169_18DV","QSAC169_19DV","QSAC169_20DV", \				"QSAC169_21DV","QSAC169_22DV","QSAC169_23DV","QSAC169_24DV","QSAC169_25DV", \				"QSAC169_26DV","QSAC169_27DV","QSAC169_28DV","QSAC169_29DV","QSAC169_30DV", \				"QSAC169_31DV"]				NDD_list = ["NDD_1DV","NDD_2DV","NDD_3DV","NDD_4DV","NDD_5DV", \				"NDD_6DV","NDD_7DV","NDD_8DV","NDD_9DV","NDD_10DV", \				"NDD_11DV","NDD_12DV","NDD_13DV","NDD_14DV","NDD_15DV", \				"NDD_16DV","NDD_17DV","NDD_18DV","NDD_19DV","NDD_20DV", \				"NDD_21DV","NDD_22DV","NDD_23DV","NDD_24DV","NDD_25DV", \				"NDD_26DV","NDD_27DV","NDD_28DV","NDD_29DV","NDD_30DV", \				"NDD_31DV"]    QSAC169_ref = transpose_day(QSAC169_list)NDD_ref = transpose_day(NDD_list)QSAC169_rts = RegularTimeSeries('',sdate_day,'1DAY',QSAC169_ref,attr)NDD_rts = RegularTimeSeries('',sdate_day,'1DAY',NDD_ref,attr)#writedss(calsimqafile,'/CALSIM/QSAC169/FLOW-CHANNEL//1DAY/TRANSPOSED/',QSAC169_rts) # Uncomment for QA/QC#writedss(calsimqafile,'/CALSIM/NDD-POTENTIAL/FLOW-DELIVERY//1DAY/TRANSPOSED/',NDD_rts) # Uncomment for QA/QCC169_MON = DataReference.create(path_check(CALSIM,'/CALSIM/C169/FLOW-CHANNEL//1MON/'+fpart_calsim+'/'),tw_mon).getData()C169 = daily_pattern(C169_MON,QSAC169_rts,'C169')C169_rts = RegularTimeSeries('',sdate_day,'1DAY',C169,attr)writedss(calsimqafile,'/'+apart+'/C169/FLOW-CHANNEL//1DAY/'+fpart+'/',C169_rts) # Step 2 - Sacramento Weir and Fremont Weir Daily Spills ###############################################print "\nComputing Daily Sacramento and Freeport Weir Spills.."FRESPILL_list = ["FRESPILL_1DV","FRESPILL_2DV","FRESPILL_3DV","FRESPILL_4DV","FRESPILL_5DV", \				"FRESPILL_6DV","FRESPILL_7DV","FRESPILL_8DV","FRESPILL_9DV","FRESPILL_10DV", \				"FRESPILL_11DV","FRESPILL_12DV","FRESPILL_13DV","FRESPILL_14DV","FRESPILL_15DV", \				"FRESPILL_16DV","FRESPILL_17DV","FRESPILL_18DV","FRESPILL_19DV","FRESPILL_20DV", \				"FRESPILL_21DV","FRESPILL_22DV","FRESPILL_23DV","FRESPILL_24DV","FRESPILL_25DV", \				"FRESPILL_26DV","FRESPILL_27DV","FRESPILL_28DV","FRESPILL_29DV","FRESPILL_30DV", \				"FRESPILL_31DV"]SACSPILL_list = ["SACSPILL_1DV","SACSPILL_2DV","SACSPILL_3DV","SACSPILL_4DV","SACSPILL_5DV", \				"SACSPILL_6DV","SACSPILL_7DV","SACSPILL_8DV","SACSPILL_9DV","SACSPILL_10DV", \				"SACSPILL_11DV","SACSPILL_12DV","SACSPILL_13DV","SACSPILL_14DV","SACSPILL_15DV", \				"SACSPILL_16DV","SACSPILL_17DV","SACSPILL_18DV","SACSPILL_19DV","SACSPILL_20DV", \				"SACSPILL_21DV","SACSPILL_22DV","SACSPILL_23DV","SACSPILL_24DV","SACSPILL_25DV", \				"SACSPILL_26DV","SACSPILL_27DV","SACSPILL_28DV","SACSPILL_29DV","SACSPILL_30DV", \				"SACSPILL_31DV"]FRESPILL = transpose_day(FRESPILL_list)SACSPILL = transpose_day(SACSPILL_list)FRESPILL_rts = RegularTimeSeries('',sdate_day,'1DAY',FRESPILL,attr)SACSPILL_rts = RegularTimeSeries('',sdate_day,'1DAY',SACSPILL,attr)writedss(calsimqafile,'/'+apart+'/D160/FLOW-DELIVERY//1DAY/'+fpart+'/',FRESPILL_rts) writedss(calsimqafile,'/'+apart+'/D166A/FLOW-DELIVERY//1DAY/'+fpart+'/',SACSPILL_rts) # Step 3 - Daily Selective Mapping of Delta Inflows using DayFlow Adjusted Data ################################# Loading DAYFLOW Daily Dataprint "\nPerforming Daily Selective Mapping of Delta Inflows...."SAC_DF = DataReference.create(path_check(DAYFLOWADJ,'/HISTORIC/SAC/FLOW//1DAY/DAYFLOW/'),tw_day).getData()SJR_DF = DataReference.create(path_check(DAYFLOWADJ,'/HISTORIC/SJR/FLOW//1DAY/DAYFLOW/'),tw_day).getData()YOLO_DF = DataReference.create(path_check(DAYFLOWADJ,'/HISTORIC/YOLO/FLOW//1DAY/DAYFLOW/'),tw_day).getData()YOLO_NW_DF = DataReference.create(path_check(DAYFLOWADJ,'/HISTORIC/YOLO_NONWEIR/FLOW//1DAY/DAYFLOW/'),tw_day).getData()MOKE_DF = DataReference.create(path_check(DAYFLOWADJ,'/HISTORIC/MOKE/FLOW//1DAY/DAYFLOW/'),tw_day).getData()CSMR_DF = DataReference.create(path_check(DAYFLOWADJ,'/HISTORIC/CSMR/FLOW//1DAY/DAYFLOW/'),tw_day).getData()CALV_DF = DataReference.create(path_check(DAYFLOWADJ,'/HISTORIC/MISC/FLOW//1DAY/DAYFLOW/'),tw_day).getData()TOT_3DAY_DF = DataReference.create(path_check(DAYFLOWADJ,'/HISTORIC/TOT_3DAY/FLOW//1DAY/DAYFLOW/'),tw_day).getData()# Loading CALSIM Monthly DataC639_M = DataReference.create(path_check(CALSIM,'/CALSIM/C639/FLOW-CHANNEL//1MON/'+fpart_calsim+'/'),tw_mon).getData()C157_M = DataReference.create(path_check(CALSIM,'/CALSIM/C157/FLOW-CHANNEL//1MON/'+fpart_calsim+'/'),tw_mon).getData()C504_M = DataReference.create(path_check(CALSIM,'/CALSIM/C504/FLOW-CHANNEL//1MON/'+fpart_calsim+'/'),tw_mon).getData()C508_M = DataReference.create(path_check(CALSIM,'/CALSIM/C508/FLOW-CHANNEL//1MON/'+fpart_calsim+'/'),tw_mon).getData()C501_M = DataReference.create(path_check(CALSIM,'/CALSIM/C501/FLOW-CHANNEL//1MON/'+fpart_calsim+'/'),tw_mon).getData()D160_M = DataReference.create(path_check(CALSIM,'/CALSIM/D160/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D166A_M = DataReference.create(path_check(CALSIM,'/CALSIM/D166A/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D418_TD_M = DataReference.create(path_check(CALSIM,'/CALSIM/D418_TD/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D419_TD_M = DataReference.create(path_check(CALSIM,'/CALSIM/D419_TD/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()# Equivalent DataSJR_CAL = C639_MYOLO_CAL = C157_MYOLO_NW_CAL = C157_M-D160_M-D166A_MMOKE_CAL = C504_M-C501_MCSMR_CAL = C501_MCALV_CAL = C508_MD418_TD_CAL = D418_TD_MD419_TD_CAL = D419_TD_M# Create arrays of Time SeriesB_PART = ['C639','C157','C157-D160-D166A','C503','C501','C508']C_PART = ['FLOW-CHANNEL','FLOW-CHANNEL','FLOW-CHANNEL','FLOW-CHANNEL','FLOW-CHANNEL','FLOW-CHANNEL']CALSIM_TS = [SJR_CAL,YOLO_CAL,YOLO_NW_CAL,MOKE_CAL,CSMR_CAL,CALV_CAL]OBS_TS = [SJR_DF,YOLO_DF,YOLO_NW_DF,MOKE_DF,CSMR_DF,CALV_DF]# Minimum flow and adjustment factors when Daily Patterns are not appliedminflow = [2000,0,0,0,0,0]minadjfac = [0.25,0.25,0.25,0.25,0.25,0.25]maxadjfac = [7.0,7.0,7.0,7.0,7.0,7.0] # Loading SJR Minimum flow, when SJR monthly flow is below this value, no Daily Patterns are not appliedSJR_MIN = DataReference.create(path_check(SJRNOPAT,'/WYTYPE/SJR/FLOW-MIN//1MON/'+fpart_sjr+'/'),tw_mon).getData()#FAC_ADJ_TS = {}MOD_FLOW_TS = {}#FAC_ADJ_TS_D = {}i = 0while i < len(CALSIM_TS):	CAL = CALSIM_TS[i]	OBS_D = OBS_TS[i]	bpart = B_PART[i]	cpart = C_PART[i]	print "\nApplying Daily Patterns to %s .." % bpart	OBS = per_avg(OBS_D,'1MON')	fac = zeros(len(CAL),'d')	for n in range(len(CAL)):		if OBS[n].getY() > 0:			fac[n] = CAL[n].getY()/OBS[n].getY()		else:			fac[n] = 0	fac_adj = zeros(len(CAL),'d')	for n in range(len(CAL)):		if i == 0:			if CAL[n].getY() < SJR_MIN[n].getY() or fac[n] > maxadjfac[i] or fac[n] < minadjfac[i]:				fac_adj[n] = -1			else:				fac_adj[n] = fac[n]		else:			if CAL[n].getY() < minflow[i] or fac[n] > maxadjfac[i] or fac[n] < minadjfac[i]:				fac_adj[n] = -1			else:				fac_adj[n] = fac[n]#	FAC_ADJ_TS[i] = fac_adj # Remove this array		facadj_monrts = RegularTimeSeries('',sdate_mon,'1MON',fac_adj,attr)#	writedss(calsimqafile,'/COMPUTED/'+bpart+'/ADJ-FACTOR//1MON/DELTAINFLOWS/',facadj_monrts) # Uncomment for QA/QC	facadj_day = vutils.interpolate(facadj_monrts,'1DAY')	CAL_D = vutils.interpolate(CAL,'1DAY')	mod_flow =  zeros(len(facadj_day),'d')	for n in range(len(facadj_day)):		if facadj_day[n].getY() == -1.0:			mod_flow[n] = CAL_D[n].getY()		else:			mod_flow[n] = OBS_D[n].getY()*facadj_day[n].getY()#	FAC_ADJ_TS_D[i] = facadj_day # Remove this array	modflow_rts = RegularTimeSeries('',sdate_day,'1DAY',mod_flow,attr)	print "Smoothing Daily Patterned flows of %s .." % bpart	modflow_smooth = smooth_day(CAL,modflow_rts,4,5,bpart)	MOD_FLOW_TS[i] = modflow_smooth	modflow_smooth_rts = RegularTimeSeries('',sdate_day,'1DAY',modflow_smooth,attr)	writedss(calsimqafile,'/'+apart+'/'+bpart+'/'+cpart+'//1DAY/'+fpart+'/',modflow_smooth_rts)#	error_check(CAL,mod_flow,bpart,1)	i = i + 1# Step 4 - Exports DailyMapping adjusted for Pumping Capacityprint "\nPerforming Daily Mapping of North Delta Diversion (NDD).."# NDD AdjustmentJ_IF_M = DataReference.create(path_check(CALSIM,'/CALSIM/D418_IF/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()B_IF_M = DataReference.create(path_check(CALSIM,'/CALSIM/D419_IF/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()TOT_IF_M = J_IF_M + B_IF_MNDD_ADJ = daily_pattern(TOT_IF_M,NDD_rts,'NDD_ADJ')NDD_ADJ_rts = RegularTimeSeries('',sdate_day,'1DAY',NDD_ADJ,attr)#writedss(calsimqafile,'/COMPUTED/NDD_ADJ/FLOW-DELIVERY//1DAY/INTERMEDIATE/',NDD_ADJ_rts) #Uncomment for QA/QC# Splitting NDD_Adj into Jones and Banks IFprint "Splitting NDD into Jones and Banks Isoloated Facility (IF) Diversions.."J_IF_fac = zeros(len(J_IF_M),'d')B_IF_fac = zeros(len(J_IF_M),'d')for n in range(len(J_IF_M)):	if TOT_IF_M[n].getY() == 0:		J_IF_fac[n] = 0		B_IF_fac[n] = 0	else:		J_IF_fac[n] = J_IF_M[n].getY()/TOT_IF_M[n].getY()		B_IF_fac[n] = B_IF_M[n].getY()/TOT_IF_M[n].getY()J_IF_fac_mrts = RegularTimeSeries('',sdate_mon,'1MON',J_IF_fac,attr)B_IF_fac_mrts = RegularTimeSeries('',sdate_mon,'1MON',B_IF_fac,attr)J_IF_fac_day = vutils.interpolate(J_IF_fac_mrts,'1DAY')B_IF_fac_day = vutils.interpolate(B_IF_fac_mrts,'1DAY')J_IF_Adj = zeros(len(NDD_ADJ),'d')B_IF_Adj = zeros(len(NDD_ADJ),'d')for n in range(len(NDD_ADJ)):	J_IF_Adj[n] = NDD_ADJ[n] * J_IF_fac_day[n].getY()	B_IF_Adj[n] = NDD_ADJ[n] * B_IF_fac_day[n].getY()J_IF_Adj_rts = RegularTimeSeries('',sdate_day,'1DAY',J_IF_Adj,attr)B_IF_Adj_rts = RegularTimeSeries('',sdate_day,'1DAY',B_IF_Adj,attr)# new method 05/10/10D418_TD_Day_Init = vutils.interpolate(D418_TD_M,'1DAY')D419_TD_Day_Init = vutils.interpolate(D419_TD_M,'1DAY')Jones_day_tot = J_IF_Adj_rts +  D418_TD_Day_InitBanks_day_tot = B_IF_Adj_rts +  D419_TD_Day_InitJ_over_cap = zeros(len(Jones_day_tot),'d')B_over_cap = zeros(len(Jones_day_tot),'d')J_under_cap = zeros(len(Jones_day_tot),'d')B_under_cap = zeros(len(Jones_day_tot),'d')for n in range(len(Jones_day_tot)):# Determine overage in the total Jones/Banks pumping compared to the cap and limited to initial Jones/Banks south Delta pumping	J_over_cap[n] = min(max(Jones_day_tot[n].getY() - JONES_CAP,0),D418_TD_Day_Init[n].getY())	B_over_cap[n] = min(max(Banks_day_tot[n].getY() - BANKS_CAP,0),D419_TD_Day_Init[n].getY())# Determine available capacity in Jones/Banks pumping	J_under_cap[n] = max(JONES_CAP - D418_TD_Day_Init[n].getY() - J_IF_Adj_rts[n].getY(),0)	B_under_cap[n] = max(BANKS_CAP - D419_TD_Day_Init[n].getY() - B_IF_Adj_rts[n].getY(),0)# Jones and Banks reallocation and final south Delta pumping computationJ_over_cap_monacc = accumulate_mon(J_over_cap)B_over_cap_monacc = accumulate_mon(B_over_cap)J_under_cap_monacc = accumulate_mon(J_under_cap)B_under_cap_monacc = accumulate_mon(B_under_cap)J_over_cap_monacc_inter = vutils.interpolate(J_over_cap_monacc,'1DAY')B_over_cap_monacc_inter = vutils.interpolate(B_over_cap_monacc,'1DAY')J_under_cap_monacc_inter = vutils.interpolate(J_under_cap_monacc,'1DAY')B_under_cap_monacc_inter = vutils.interpolate(B_under_cap_monacc,'1DAY')J_realloc = zeros(len(J_under_cap),'d')B_realloc = zeros(len(J_under_cap),'d')J_TD_Adj_fin = zeros(len(J_under_cap),'d')B_TD_Adj_fin = zeros(len(J_under_cap),'d')for n in range(len(J_under_cap)):	if J_under_cap_monacc_inter[n].getY() == 0:		J_realloc[n] = 0	else:		J_realloc[n] = J_under_cap[n]*(J_over_cap_monacc_inter[n].getY()/J_under_cap_monacc_inter[n].getY())	if	B_under_cap_monacc_inter[n].getY() == 0:		B_realloc[n] = 0	else:		B_realloc[n] = B_under_cap[n]*(B_over_cap_monacc_inter[n].getY()/B_under_cap_monacc_inter[n].getY())	J_TD_Adj_fin[n] = D418_TD_Day_Init[n].getY() - J_over_cap[n] + J_realloc[n]	B_TD_Adj_fin[n] = D419_TD_Day_Init[n].getY() - B_over_cap[n] + B_realloc[n]J_TD_Adj_fin_rts = RegularTimeSeries('',sdate_day,'1DAY',J_TD_Adj_fin,attr)B_TD_Adj_fin_rts = RegularTimeSeries('',sdate_day,'1DAY',B_TD_Adj_fin,attr)writedss(calsimdailyfile,'/'+apart+'/D418_TD_ADJ/FLOW-DELIVERY//1DAY/'+fpart+'/',J_TD_Adj_fin_rts)writedss(calsimdailyfile,'/'+apart+'/D419_TD_ADJ/FLOW-DELIVERY//1DAY/'+fpart+'/',B_TD_Adj_fin_rts)# Determine Jones and Banks total pumpingJ_total_day = J_IF_Adj_rts + J_TD_Adj_fin_rtsB_total_day = B_IF_Adj_rts + B_TD_Adj_fin_rtsTotal_pump_day = J_total_day + B_total_dayTotal_over_cap = zeros(len(Total_pump_day),'d')Total_under_cap = zeros(len(Total_pump_day),'d')for n in range(len(Total_pump_day)):# Determine total pumping over the cap	Total_over_cap[n] = max(Total_pump_day[n].getY() - TOT_CAP,0)# Determine total pumping under the cap subject to minimum SacR at freeport flow	Total_under_cap[n] = min(max(TOT_CAP - Total_pump_day[n].getY(),0),max(C169_rts[n].getY() - 5000.0,0))# Determine NDD redistribution and compute final NDD_AdjTotal_over_cap_monacc = accumulate_mon(Total_over_cap)Total_under_cap_monacc = accumulate_mon(Total_under_cap)Total_over_cap_monacc_inter = vutils.interpolate(Total_over_cap_monacc,'1DAY')Total_under_cap_monacc_inter = vutils.interpolate(Total_under_cap_monacc,'1DAY')NDD_realloc = zeros(len(Total_under_cap),'d')NDD_Adj_fin = zeros(len(Total_under_cap),'d')for n in range(len(Total_under_cap)):	if Total_under_cap_monacc_inter[n].getY() == 0:		NDD_realloc[n] = 0	else:		NDD_realloc[n] = Total_under_cap[n]*(Total_over_cap_monacc_inter[n].getY()/Total_under_cap_monacc_inter[n].getY())	NDD_Adj_fin[n] = NDD_ADJ[n] - Total_over_cap[n] + NDD_realloc[n]NDD_Adj_fin_rts = RegularTimeSeries('',sdate_day,'1DAY',NDD_Adj_fin,attr)writedss(calsimdailyfile,'/'+apart+'/NDD_ADJ/FLOW-DELIVERY//1DAY/'+fpart+'/',NDD_Adj_fin_rts)# Step 5 - DXC Daily Mappingprint "\nPerforming Daily Mapping of Delta Cross Channel Gate Operation.."DXC_M = DataReference.create(path_check(CALSIM,'/CALSIM/DXC/GATE-DAYS-OPEN//1MON/'+fpart_calsim+'/'),tw_mon).getData()SAC_US_DXC = C169_rts - NDD_Adj_fin_rtsDXC_D_inter = vutils.interpolate(DXC_M,'1DAY')DXC_D = zeros(len(SAC_US_DXC),'d')daysin = [31,30,31,31,28,31,30,31,30,31,31,30]day_c = 0for year in range(1922,2004,1):	daysin[4]=28	if (year/4.0 - year/4) == 0.0:		daysin[4]=29   	for mon in daysin:		ncap = 1		for day in range(mon):			if DXC_D_inter[day_c].getY() > 0 and SAC_US_DXC[day_c].getY() < 25000 and ncap <= DXC_D_inter[day_c].getY():				ncap = ncap + 1				DXC_D[day_c] = 1			else:				DXC_D[day_c] = 0			day_c = day_c + 1DXC_rts = RegularTimeSeries('',sdate_day,'1DAY',DXC_D)DXC_M_acc = accumulate_mon(DXC_D)writedss(calsimqafile,'/'+apart+'/DCC/OP//1DAY/'+fpart+'/',DXC_rts)error_check(DXC_M,DXC_M_acc,'DXC',0)# Step 6 Revising all the Daily Mapped data based on Diversion Flags D160_ADJ             = FRESPILLD166A_ADJ            = SACSPILLC169_ADJ             = C169C639_ADJ             = MOD_FLOW_TS[0]C157_ADJ             = MOD_FLOW_TS[1]C157_D160_D166A_ADJ  = MOD_FLOW_TS[2]C503_ADJ             = MOD_FLOW_TS[3]C501_ADJ             = MOD_FLOW_TS[4]C508_ADJ             = MOD_FLOW_TS[5]NDD_ADJ              = NDD_Adj_finJONES_IF_ADJ         = J_IF_AdjBANKS_IF_ADJ         = B_IF_AdjJONES_SD_ADJ         = J_TD_Adj_finBANKS_SD_ADJ         = B_TD_Adj_finerror_check(C169_MON,C169_ADJ,'C169',1)error_check(SJR_CAL,C639_ADJ,'C639',1)error_check(YOLO_CAL,C157_ADJ,'C157',1)error_check(YOLO_NW_CAL,C157_D160_D166A_ADJ,'C157-D160-D166A',1)error_check(MOKE_CAL,C503_ADJ,'C503',1)error_check(CSMR_CAL,C501_ADJ,'C501',1)error_check(CALV_CAL,C508_ADJ,'C508',1)error_check(TOT_IF_M,NDD_ADJ,'NDD_ADJ',1)error_check(J_IF_M,JONES_IF_ADJ,'JONES_IF_ADJ',1)error_check(B_IF_M,BANKS_IF_ADJ,'BANKS_IF_ADJ',1)error_check(D418_TD_M,JONES_SD_ADJ,'JONES_SD_ADJ',1)error_check(D419_TD_M,BANKS_SD_ADJ,'BANKS_SD_ADJ',1)D160_RTS             = RegularTimeSeries('',sdate_day,'1DAY',D160_ADJ,attr)D166A_RTS            = RegularTimeSeries('',sdate_day,'1DAY',D166A_ADJ,attr)C169_RTS             = RegularTimeSeries('',sdate_day,'1DAY',C169_ADJ,attr)C639_RTS             = RegularTimeSeries('',sdate_day,'1DAY',C639_ADJ,attr)C157_RTS             = RegularTimeSeries('',sdate_day,'1DAY',C157_ADJ,attr)C157_D160_D166A_RTS  = RegularTimeSeries('',sdate_day,'1DAY',C157_D160_D166A_ADJ,attr)C503_RTS             = RegularTimeSeries('',sdate_day,'1DAY',C503_ADJ,attr)C501_RTS             = RegularTimeSeries('',sdate_day,'1DAY',C501_ADJ,attr)C508_RTS             = RegularTimeSeries('',sdate_day,'1DAY',C508_ADJ,attr)NDD_RTS              = RegularTimeSeries('',sdate_day,'1DAY',NDD_ADJ,attr)JONES_IF_RTS         = RegularTimeSeries('',sdate_day,'1DAY',JONES_IF_ADJ,attr)BANKS_IF_RTS         = RegularTimeSeries('',sdate_day,'1DAY',BANKS_IF_ADJ,attr)JONES_SD_RTS         = RegularTimeSeries('',sdate_day,'1DAY',JONES_SD_ADJ,attr)BANKS_SD_RTS         = RegularTimeSeries('',sdate_day,'1DAY',BANKS_SD_ADJ,attr)# Step - Checking for Daily Balance and minimum NDO condition# Loading CALSIM Monthly Diversion and Return FlowsD403A_M   = DataReference.create(path_check(CALSIM,'/CALSIM/D403A/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D403B_M   = DataReference.create(path_check(CALSIM,'/CALSIM/D403B/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D403C_M   = DataReference.create(path_check(CALSIM,'/CALSIM/D403C/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D403D_M   = DataReference.create(path_check(CALSIM,'/CALSIM/D403D/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D406B_M   = DataReference.create(path_check(CALSIM,'/CALSIM/D406B/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D408_OR_M = DataReference.create(path_check(CALSIM,'/CALSIM/D408_OR/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D408_RS_M = DataReference.create(path_check(CALSIM,'/CALSIM/D408_RS/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D408_VC_M = DataReference.create(path_check(CALSIM,'/CALSIM/D408_VC/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D514A_M   = DataReference.create(path_check(CALSIM,'/CALSIM/D514A/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D514B_M   = DataReference.create(path_check(CALSIM,'/CALSIM/D514B/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()R514_M    = DataReference.create(path_check(CALSIM,'/CALSIM/R514/FLOW-RETURN//1MON/'+fpart_calsim+'/'),tw_mon).getData()R644_M    = DataReference.create(path_check(CALSIM,'/CALSIM/R644/FLOW-RETURN//1MON/'+fpart_calsim+'/'),tw_mon).getData()D168B_M   = DataReference.create(path_check(CALSIM,'/CALSIM/D168B/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D168C_M   = DataReference.create(path_check(CALSIM,'/CALSIM/D168C/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D403A_inter   = vutils.interpolate(D403A_M,'1DAY')D403B_inter   = vutils.interpolate(D403B_M,'1DAY')D403C_inter   = vutils.interpolate(D403C_M,'1DAY')D403D_inter   = vutils.interpolate(D403D_M,'1DAY')D406B_inter   = vutils.interpolate(D406B_M,'1DAY')D408_OR_inter = vutils.interpolate(D408_OR_M,'1DAY')D408_RS_inter = vutils.interpolate(D408_RS_M,'1DAY')D408_VC_inter = vutils.interpolate(D408_VC_M,'1DAY')D514A_inter   = vutils.interpolate(D514A_M,'1DAY')D514B_inter   = vutils.interpolate(D514B_M,'1DAY')R514_inter    = vutils.interpolate(R514_M,'1DAY')R644_inter    = vutils.interpolate(R644_M,'1DAY')D168B_inter   = vutils.interpolate(D168B_M,'1DAY')D168C_inter   = vutils.interpolate(D168C_M,'1DAY')D403A_inter.setAttributes(attr)D403B_inter.setAttributes(attr)D403C_inter.setAttributes(attr)D403D_inter.setAttributes(attr)D406B_inter.setAttributes(attr)D408_OR_inter.setAttributes(attr)D408_RS_inter.setAttributes(attr)D408_VC_inter.setAttributes(attr)D514A_inter.setAttributes(attr)D514B_inter.setAttributes(attr)R514_inter.setAttributes(attr)R644_inter.setAttributes(attr)D168B_inter.setAttributes(attr)D168C_inter.setAttributes(attr)# Loading Local Inflowsconv = tafpm2cfs()TAFPM2CFS = RegularTimeSeries('',sdate_mon,'1MON',conv,attr)I406_M   = DataReference.create(path_check(CALSIMSV,'/CALSIM/I406/FLOW-INFLOW//1MON/'+fpart_calsim+'/'),tw_mon).getData() * TAFPM2CFSD400B_M  = DataReference.create(path_check(CALSIM,'/CALSIM/D400B/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D404_M   = DataReference.create(path_check(CALSIM,'/CALSIM/D404/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D406_M   = DataReference.create(path_check(CALSIM,'/CALSIM/D406/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D409B_M  = DataReference.create(path_check(CALSIM,'/CALSIM/D409B/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D410_M   = DataReference.create(path_check(CALSIM,'/CALSIM/D410/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D412_M   = DataReference.create(path_check(CALSIM,'/CALSIM/D412/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()D413_M   = DataReference.create(path_check(CALSIM,'/CALSIM/D413/FLOW-DELIVERY//1MON/'+fpart_calsim+'/'),tw_mon).getData()I400_M   = DataReference.create(path_check(CALSIMSV,'/CALSIM/I400/NETDICU_NEG//1MON/'+fpart_calsim+'/'),tw_mon).getData() * TAFPM2CFSI404_M   = DataReference.create(path_check(CALSIMSV,'/CALSIM/I404/NETDICU_NEG//1MON/'+fpart_calsim+'/'),tw_mon).getData() * TAFPM2CFSI406B_M  = DataReference.create(path_check(CALSIMSV,'/CALSIM/I406B/NETDICU_NEG//1MON/'+fpart_calsim+'/'),tw_mon).getData() * TAFPM2CFSI409_M   = DataReference.create(path_check(CALSIMSV,'/CALSIM/I409/NETDICU_NEG//1MON/'+fpart_calsim+'/'),tw_mon).getData() * TAFPM2CFSI410_M   = DataReference.create(path_check(CALSIMSV,'/CALSIM/I410/NETDICU_NEG//1MON/'+fpart_calsim+'/'),tw_mon).getData() * TAFPM2CFSI412_M   = DataReference.create(path_check(CALSIMSV,'/CALSIM/I412/NETDICU_NEG//1MON/'+fpart_calsim+'/'),tw_mon).getData() * TAFPM2CFSI413_M   = DataReference.create(path_check(CALSIMSV,'/CALSIM/I413/NETDICU_NEG//1MON/'+fpart_calsim+'/'),tw_mon).getData() * TAFPM2CFSI406_inter   = vutils.interpolate(I406_M,'1DAY')D400B_inter  = vutils.interpolate(D400B_M,'1DAY')D404_inter   = vutils.interpolate(D404_M,'1DAY')D406_inter   = vutils.interpolate(D406_M,'1DAY')D409B_inter  = vutils.interpolate(D409B_M,'1DAY')D410_inter   = vutils.interpolate(D410_M,'1DAY')D412_inter   = vutils.interpolate(D412_M,'1DAY')D413_inter   = vutils.interpolate(D413_M,'1DAY')I400_inter   = vutils.interpolate(I400_M,'1DAY')I404_inter   = vutils.interpolate(I404_M,'1DAY')I406B_inter  = vutils.interpolate(I406B_M,'1DAY')I409_inter   = vutils.interpolate(I409_M,'1DAY')I410_inter   = vutils.interpolate(I410_M,'1DAY')I412_inter   = vutils.interpolate(I412_M,'1DAY')I413_inter   = vutils.interpolate(I413_M,'1DAY')I406_inter.setAttributes(attr)D400B_inter.setAttributes(attr)D404_inter.setAttributes(attr)D406_inter.setAttributes(attr)D409B_inter.setAttributes(attr)D410_inter.setAttributes(attr)D412_inter.setAttributes(attr)D413_inter.setAttributes(attr)I400_inter.setAttributes(attr)I404_inter.setAttributes(attr)I406B_inter.setAttributes(attr)I409_inter.setAttributes(attr)I410_inter.setAttributes(attr)I412_inter.setAttributes(attr)I413_inter.setAttributes(attr)NET_LOCAL_INF = (I406_inter + I400_inter + I404_inter + I406B_inter + I409_inter + I410_inter \				+ I412_inter + I413_inter) - (D400B_inter + D404_inter + D406_inter + D409B_inter \				+ D410_inter + D412_inter + D413_inter)NDO_Init = (C169_RTS + C639_RTS + C157_RTS + C501_RTS + C503_RTS + C508_RTS) + (R644_inter + R514_inter) \			- (D406B_inter + D403A_inter + D403B_inter + D403C_inter + D403D_inter + D408_RS_inter + D408_OR_inter \			+ D408_VC_inter + D514A_inter + D514B_inter) + NET_LOCAL_INF - NDD_RTS - JONES_SD_RTS - BANKS_SD_RTSwritedss(calsimqafile,'/'+apart+'/NDO/FLOW//1DAY/'+fpart+'/',NDO_Init)# Step 7 - Final calculations and storing DSS recordsprint "\nPerforming final calculations and storing data to DSS file.."C508_R514        = C508_RTS + R514_interC501             = C501_RTSI504             = C503_RTSC169_D168B_D168C = C169_RTS + D168B_inter + D168C_interC639_R644        = C639_RTS + R644_interC157             = C157_D160_D166A_RTS + D160_RTS + D166A_RTSNDD_ADJ          = NDD_RTSD418_TD          = JONES_SD_RTSD419_TD          = BANKS_SD_RTSDCC              = DXC_rtsD403A            = D403A_interD403B            = D403B_interD403C            = D403C_interD403D            = D403D_interD408_VC          = D408_VC_interD408_OR          = D408_OR_interD408_RS          = D408_RS_interD168B            = D168B_interD168C            = D168C_interD406B            = D406B_interD514A            = D514A_interD514B            = D514B_interwritedss(calsimdailyfile,'/'+apart+'/C508_R514/FLOW-CHANNEL//1DAY/'+fpart+'/',C508_R514)writedss(calsimdailyfile,'/'+apart+'/C501/FLOW-CHANNEL//1DAY/'+fpart+'/',C501)writedss(calsimdailyfile,'/'+apart+'/I504/FLOW-INFLOW//1DAY/'+fpart+'/',I504)writedss(calsimdailyfile,'/'+apart+'/C169_D168B_D168C/FLOW//1DAY/'+fpart+'/',C169_D168B_D168C)writedss(calsimdailyfile,'/'+apart+'/C639_R644/FLOW//1DAY/'+fpart+'/',C639_R644)writedss(calsimdailyfile,'/'+apart+'/C157/FLOW-CHANNEL//1DAY/'+fpart+'/',C157)writedss(calsimdailyfile,'/'+apart+'/DCC/OP//1DAY/'+fpart+'/',DCC)writedss(calsimdailyfile,'/'+apart+'/D403A/FLOW-DELIVERY//1DAY/'+fpart+'/',D403A)writedss(calsimdailyfile,'/'+apart+'/D403B/FLOW-DELIVERY//1DAY/'+fpart+'/',D403B)writedss(calsimdailyfile,'/'+apart+'/D403C/FLOW-DELIVERY//1DAY/'+fpart+'/',D403C)writedss(calsimdailyfile,'/'+apart+'/D403D/FLOW-DELIVERY//1DAY/'+fpart+'/',D403D)writedss(calsimdailyfile,'/'+apart+'/D408_VC/FLOW-DELIVERY//1DAY/'+fpart+'/',D408_VC)writedss(calsimdailyfile,'/'+apart+'/D408_OR/FLOW-DELIVERY//1DAY/'+fpart+'/',D408_OR)writedss(calsimdailyfile,'/'+apart+'/D408_RS/FLOW-DELIVERY//1DAY/'+fpart+'/',D408_RS)writedss(calsimdailyfile,'/'+apart+'/D168B/FLOW-DELIVERY//1DAY/'+fpart+'/',D168B)writedss(calsimdailyfile,'/'+apart+'/D168C/FLOW-DELIVERY//1DAY/'+fpart+'/',D168C)writedss(calsimdailyfile,'/'+apart+'/D406B/FLOW-DELIVERY//1DAY/'+fpart+'/',D406B)writedss(calsimdailyfile,'/'+apart+'/D514A/FLOW-DELIVERY//1DAY/'+fpart+'/',D514A)writedss(calsimdailyfile,'/'+apart+'/D514B/FLOW-DELIVERY//1DAY/'+fpart+'/',D514B)nodes_to_extend_list = ['^C508_R514$','^C501$','^I504$','^C169_D168B_D168C$','^C639_R644$',\						'^C157$','^NDD_ADJ$','^D418_TD_ADJ$','^D419_TD_ADJ$','^DCC$','^D403A$','^D403B$',\						'^D403C$','^D403D$','^D408_VC$','^D408_OR$','^D408_RS$','^D168B$','^D168C$',\						'^D406B$','^D514A$','^D514B$']print "\nExtending data up to wateryear 1921 for the following records.."extend_flow(nodes_to_extend_list)print "\nAll Daily Mapped records are written to file: %s" % calsimdailyfileprint "\nFinished Successfully !!!"sys.exit()# End ############