macro (SET_COMPILER_FLAGS)
    #- To ensure static linking for C++ code
    set(CMAKE_CXX_FLAGS_RELEASE "/MT")
    set(CMAKE_CXX_FLAGS_DEBUG "/MTd")
    #- To ensure static linking for C code
    set(CMAKE_C_FLAGS_RELEASE "/MT")
    set(CMAKE_C_FLAGS_DEBUG "/MTd")
    # Fortran flags
    set(CMAKE_Fortran_MODULE_DIRECTORY ${PROJECT_BINARY_DIR}/modules)
    #--- Fortran compiler options
    if (Fortran_COMPILER_NAME MATCHES "gfortran.*")
      # gfortran
      set (CMAKE_Fortran_FLAGS_RELEASE "-funroll-all-loops -fno-f2c -O3")
      set (CMAKE_Fortran_FLAGS_DEBUG   "-fno-f2c -O0 -g")
    elseif (Fortran_COMPILER_NAME MATCHES "ifort.*")
      # ifort (untested)
      if (WIN32)
          set (CMAKE_Fortran_FLAGS "/free")  
          set (CMAKE_Fortran_FLAGS_RELEASE "/f77rtl /O3")
          #set (CMAKE_Fortran_FLAGS_DEBUG   "/Od /f77rtl /debug:full /Qfp-stack-check /dbglibs /check:all /traceback /warn:unused")
          set (CMAKE_Fortran_FLAGS_DEBUG   "/f77rtl /check:all /traceback /warn:unused")
      else (WIN32)
          # free format
          set (CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS}" "-free")  
          set (CMAKE_Fortran_FLAGS_RELEASE "-f77rtl -O3")
          set (CMAKE_Fortran_FLAGS_DEBUG   "-f77rtl -O0 -g")
      endif (WIN32)
    elseif (Fortran_COMPILER_NAME MATCHES "g77")
      # g77
      set (CMAKE_Fortran_FLAGS_RELEASE "-funroll-all-loops -fno-f2c -O3 -m32")
      set (CMAKE_Fortran_FLAGS_DEBUG   "-fno-f2c -O0 -g -m32")
    else (Fortran_COMPILER_NAME MATCHES "gfortran.*")
      message ("CMAKE_Fortran_COMPILER full path: " ${CMAKE_Fortran_COMPILER})
      message ("Fortran compiler: " ${Fortran_COMPILER_NAME})
      message ("No optimized Fortran compiler flags are known, we just try -O2...")
      set (CMAKE_Fortran_FLAGS_RELEASE "-O2")
      set (CMAKE_Fortran_FLAGS_DEBUG   "-O0 -g")
    endif (Fortran_COMPILER_NAME MATCHES "gfortran.*")
    set (CMAKE_Fortran_FLAGS "/extend_source:132")
    #-------------add linker flags and excluded and included libraries
endmacro(SET_COMPILER_FLAGS)
###############################################################################################################
macro (FIND_LIBS)
    #----------------- FIND THE LIBRARIES -------------------
    #boost libraries
    #boost libraries built with ./b2 runtime-link=static
    set(BOOST_VERSION 1_64)
    set(BOOST_DIR ${DSM2_THIRD_PARTY_DIR}/boost_${BOOST_VERSION}_0)
    set(BOOST_LIB_DIR ${BOOST_DIR}/stage/lib)
    set(BOOST_VC_VERSION "vc140")
    find_library(BOOST_FILESYSTEM_DEBUG NAMES libboost_filesystem-${BOOST_VC_VERSION}-mt-sgd-${BOOST_VERSION}.lib PATHS ${BOOST_LIB_DIR} NO_DEFAULT_PATH)
    find_library(BOOST_FILESYSTEM_RELEASE NAMES libboost_filesystem-${BOOST_VC_VERSION}-mt-s-${BOOST_VERSION}.lib PATHS ${BOOST_LIB_DIR} NO_DEFAULT_PATH)
    find_library(BOOST_REGEX_DEBUG NAMES libboost_regex-${BOOST_VC_VERSION}-mt-sgd-${BOOST_VERSION}.lib PATHS ${BOOST_LIB_DIR} NO_DEFAULT_PATH)
    find_library(BOOST_REGEX_RELEASE NAMES libboost_regex-${BOOST_VC_VERSION}-mt-s-${BOOST_VERSION}.lib PATHS ${BOOST_LIB_DIR} NO_DEFAULT_PATH)
    find_library(BOOST_SYSTEM_DEBUG NAMES libboost_system-${BOOST_VC_VERSION}-mt-sgd-${BOOST_VERSION}.lib PATHS ${BOOST_LIB_DIR} NO_DEFAULT_PATH)
    find_library(BOOST_SYSTEM_RELEASE NAMES libboost_system-${BOOST_VC_VERSION}-mt-s-${BOOST_VERSION}.lib PATHS ${BOOST_LIB_DIR} NO_DEFAULT_PATH)
    find_library(BOOST_UNITTEST_DEBUG NAMES libboost_unit_test_framework-${BOOST_VC_VERSION}-mt-sgd-${BOOST_VERSION}.lib PATHS ${BOOST_LIB_DIR} NO_DEFAULT_PATH)
    find_library(BOOST_UNITTEST_RELEASE NAMES libboost_unit_test_framework-${BOOST_VC_VERSION}-mt-s-${BOOST_VERSION}.lib PATHS ${BOOST_LIB_DIR} NO_DEFAULT_PATH)
    include_directories("${BOOST_DIR}")
    # ---------------- HDF5 setup -------------- hdf5.lib hdf5_hl_fortran.lib hdf5_fortran.lib hdf5_f90cstub.lib hdf5_hl.lib 
    set(HDF5_DIR "${DSM2_THIRD_PARTY_DIR}/HDF5-1.8.20-win32")
    set(HDF5_LIB_PREFIX "lib")
    set(HDF5_LIB_PATH "${HDF5_DIR}/lib")
    set(HDF5_FORTRAN_INCLUDE_PATH "${HDF5_DIR}/include/static")
    include_directories("${HDF5_DIR}/include" "${HDF5_DIR}/include/static")
    find_library(HDF5 NAMES ${HDF5_LIB_PREFIX}hdf5.lib PATHS ${HDF5_LIB_PATH} NO_DEFAULT_PATH)
    find_library(HDF5_HL NAMES ${HDF5_LIB_PREFIX}hdf5_hl.lib PATHS ${HDF5_LIB_PATH} NO_DEFAULT_PATH)
    find_library(HDF5_CPP NAMES ${HDF5_LIB_PREFIX}hdf5_cpp.lib PATHS ${HDF5_LIB_PATH} NO_DEFAULT_PATH)
    find_library(HDF5_HL_CPP NAMES ${HDF5_LIB_PREFIX}hdf5_hl_cpp.lib PATHS ${HDF5_LIB_PATH} NO_DEFAULT_PATH)
    find_library(HDF5_FORTRAN NAMES ${HDF5_LIB_PREFIX}hdf5_fortran.lib PATHS ${HDF5_LIB_PATH} NO_DEFAULT_PATH)
    find_library(HDF5_HL_FORTRAN NAMES ${HDF5_LIB_PREFIX}hdf5_hl_fortran.lib PATHS ${HDF5_LIB_PATH} NO_DEFAULT_PATH)
    find_library(HDF5_F90CSTUB NAMES ${HDF5_LIB_PREFIX}hdf5_f90cstub.lib PATHS ${HDF5_LIB_PATH} NO_DEFAULT_PATH)
    find_library(HDF5_HL_F90CSTUB NAMES ${HDF5_LIB_PREFIX}hdf5_hl_f90cstub.lib PATHS ${HDF5_LIB_PATH} NO_DEFAULT_PATH)
    #szlib.lib zlib.lib 
    find_library(SZLIB NAMES ${HDF5_LIB_PREFIX}szip.lib PATHS "${HDF5_LIB_PATH}" NO_DEFAULT_PATH)
    find_library(ZLIB NAMES ${HDF5_LIB_PREFIX}zlib.lib PATHS "${HDF5_LIB_PATH}" NO_DEFAULT_PATH)
    # heclib_vs14_debug.lib 
    find_library(HECLIB_DEBUG NAMES heclib_vs14_debug.lib PATHS "${DSM2_TOP_DIR}/lib" NO_DEFAULT_PATH)
    find_library(HECLIB_RELEASE NAMES heclib_vs14.lib PATHS "${DSM2_TOP_DIR}/lib" NO_DEFAULT_PATH)
    # oprule_vs14_mtd.lib oprule_parser_vs14_mtd.lib
    find_library(OPRULE_DEBUG NAMES_DEBUG oprule_vs14_mtd.lib PATHS "${DSM2_TOP_DIR}/lib" NO_DEFAULT_PATH)
    find_library(OPRULE_PARSER_DEBUG NAMES oprule_parser_vs14_mtd.lib PATHS "${DSM2_TOP_DIR}/lib" NO_DEFAULT_PATH)
    find_library(OPRULE_RELEASE NAMES oprule_vs14_mt.lib PATHS "${DSM2_TOP_DIR}/lib" NO_DEFAULT_PATH)
    find_library(OPRULE_PARSER_RELEASE NAMES oprule_parser_vs14_mt.lib PATHS "${DSM2_TOP_DIR}/lib" NO_DEFAULT_PATH)
    # input_storage_vs14.lib 
    find_library(INPUT_STORAGE_DEBUG input_storage_vs14_mtd.lib PATHS "${DSM2_TOP_DIR}/lib" NO_DEFAULT_PATH)
    find_library(INPUT_STORAGE_RELEASE input_storage_vs14_mt.lib PATHS "${DSM2_TOP_DIR}/lib" NO_DEFAULT_PATH)
    # sparse klu library
    find_library(KLULIB_DEBUG KLU.lib PATHS "${DSM2_THIRD_PARTY_DIR}/SuiteSparse/KLU/build/Debug" NO_DEFAULT_PATH)
    find_library(KLULIB_RELEASE KLU.lib PATHS "${DSM2_THIRD_PARTY_DIR}/SuiteSparse/KLU/build/Release" NO_DEFAULT_PATH)
    # mkl libraries
    find_library(MKL_CORE_LIB NAMES mkl_core.lib HINTS "$ENV{IFORT_COMPILER13}/mkl/lib/ia32")
    find_library(MKL_INTEL_LIB NAMES mkl_intel_c.lib HINTS "$ENV{IFORT_COMPILER13}/mkl/lib/ia32")
    #standard libraries. no need to specify path as they are linked from default library paths FIXME: find_package
    set (CMT_LIB_DEBUG "libcmtd.lib")
    set (CMT_LIB_RELEASE "libcmt.lib")
    #math library for Intel Composer 2013 set (MMT_LIB "libmmt.lib")
    # math library for Intel VF 16  mkl_intel_c.lib mkl_sequential.lib mkl_core.lib
    set(INTEL_LIB_PATH "C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/mkl/lib/ia32")
    set(MMT_LIB "${INTEL_LIB_PATH}/mkl_intel_c.lib")
    set(MMT_SQ_LIB "${INTEL_LIB_PATH}/mkl_sequential.lib")
    set(MMT_CORE_LIB "${INTEL_LIB_PATH}/mkl_core.lib")
endmacro(FIND_LIBS)
