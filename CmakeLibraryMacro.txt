macro (SET_COMPILER_FLAGS)
  if(WIN32)
    #- To ensure static linking for C++ code
    set(CMAKE_CXX_FLAGS_RELEASE "/MT")
    set(CMAKE_CXX_FLAGS_DEBUG "/MTd")
    #- To ensure static linking for C code
    set(CMAKE_C_FLAGS_RELEASE "/MT")
    set(CMAKE_C_FLAGS_DEBUG "/MTd")
  else (WIN32)
    #set(CMAKE_CXX_FLAGS "-fpermissive")
    #set(CMAKE_C_FLAGS "-fpermissive")
    set(CMAKE_C_FLAGS_RELEASE "-O3 -fPIC")
  endif (WIN32)
  # Fortran flags
  set(CMAKE_Fortran_MODULE_DIRECTORY ${PROJECT_BINARY_DIR}/modules)
  #--- Fortran compiler options
  if(WIN32)
    message(STATUS "Fortran Compiler Name: ${Fortran_COMPILER_NAME}")
  else(WIN32) #Bug in linux version of cmake. cannot identify fortran compiler
    get_filename_component(Fortran_COMPILER_NAME ${CMAKE_Fortran_COMPILER} NAME)
    message(STATUS "Fortran Compiler Name: ${Fortran_COMPILER_NAME}")
  endif(WIN32)  
  # set compiler specific options
  if (Fortran_COMPILER_NAME MATCHES "gfortran.*")
    # gfortran
    set (CMAKE_Fortran_FLAGS_RELEASE "-funroll-all-loops -fno-f2c -O3")
    set (CMAKE_Fortran_FLAGS_DEBUG   "-fno-f2c -O0 -g")
  elseif (Fortran_COMPILER_NAME MATCHES "ifort.*")
    # ifort (untested)
    if (WIN32)
      message(STATUS "Matched Intel Fortran Compiler on Windows")
      set (CMAKE_Fortran_FLAGS "/free")  
      set (CMAKE_Fortran_FLAGS_RELEASE "/f77rtl /O3")
      #set (CMAKE_Fortran_FLAGS_DEBUG   "/Od /f77rtl /debug:full /Qfp-stack-check /dbglibs /check:all /traceback /warn:unused")
      set (CMAKE_Fortran_FLAGS_DEBUG   "/f77rtl /check:all /traceback /warn:unused")
    else (WIN32)
      message(STATUS "Matched Intel Fortran Compiler on Linux")
      set (CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -fPIC -extend_source 132")  
      set (CMAKE_Fortran_FLAGS_RELEASE "-f77rtl -O3 -fPIC")
      #set (CMAKE_Fortran_FLAGS_DEBUG   "-heap-arrays -fPIC -f77rtl -O0 -fp-stack-check -fstack-protector-all -check bounds -check uninit -traceback -g -debug full -debug-parameters all -gen-interfaces -warn interfaces")
      set (CMAKE_Fortran_FLAGS_DEBUG   "-heap-arrays -fPIC -f77rtl -O0 -check bounds -traceback -g -debug full -debug-parameters all -gen-interfaces -warn interfaces")
    endif (WIN32)
  elseif (Fortran_COMPILER_NAME MATCHES "g77")
    # g77
    set (CMAKE_Fortran_FLAGS_RELEASE "-funroll-all-loops -fno-f2c -O3 -m32")
    set (CMAKE_Fortran_FLAGS_DEBUG   "-fno-f2c -O0 -g -m32")
  else (Fortran_COMPILER_NAME MATCHES "gfortran.*")
    message ("CMAKE_Fortran_COMPILER full path: " ${CMAKE_Fortran_COMPILER})
    message ("Fortran compiler: " ${Fortran_COMPILER_NAME})
    message ("No optimized Fortran compiler flags are known, we just try -O2...")
    set (CMAKE_Fortran_FLAGS_RELEASE "-O2")
    set (CMAKE_Fortran_FLAGS_DEBUG   "-O0 -g")
  endif (Fortran_COMPILER_NAME MATCHES "gfortran.*")
  #-------------add linker flags and excluded and included libraries
endmacro(SET_COMPILER_FLAGS)
###############################################################################################################
macro (FIND_LIBS)
  #----------------- FIND THE LIBRARIES -------------------
  if (WIN32)   
    set(BOOST_VERSION 1_64)
    set(STATIC_LIB_SUFFIX "lib")
  else (WIN32)
    set(BOOST_VERSION 1_69)
    set(STATIC_LIB_SUFFIX "a")
  endif (WIN32)
  #boost libraries
  #boost libraries built with ./b2 runtime-link=static
  set(BOOST_DIR ${DSM2_THIRD_PARTY_DIR}/boost_${BOOST_VERSION}_0)
  set(BOOST_LIB_DIR ${BOOST_DIR}/stage/lib)
  if (WIN32)   
    set(BOOST_VC_VERSION "vc140")
    set(BOOST_RELEASE_VERSION "-${BOOST_VC_VERSION}-mt-s-${BOOST_VERSION}")
    set(BOOST_DEBUG_VERSION "-${BOOST_VC_VERSION}-mt-sgd-${BOOST_VERSION}")
  else (WIN32)
    set(BOOST_VC_VERSION "")
    set(BOOST_RELEASE_VERSION "")
    set(BOOST_DEBUG_VERSION "")
  endif (WIN32)
  find_library(BOOST_FILESYSTEM_DEBUG NAMES libboost_filesystem${BOOST_DEBUG_VERSION}.${STATIC_LIB_SUFFIX} PATHS ${BOOST_LIB_DIR} NO_DEFAULT_PATH)
  find_library(BOOST_FILESYSTEM_RELEASE NAMES libboost_filesystem${BOOST_RELEASE_VERSION}.${STATIC_LIB_SUFFIX} PATHS ${BOOST_LIB_DIR} NO_DEFAULT_PATH)
  find_library(BOOST_REGEX_DEBUG NAMES libboost_regex${BOOST_DEBUG_VERSION}.${STATIC_LIB_SUFFIX} PATHS ${BOOST_LIB_DIR} NO_DEFAULT_PATH)
  find_library(BOOST_REGEX_RELEASE NAMES libboost_regex${BOOST_RELEASE_VERSION}.${STATIC_LIB_SUFFIX} PATHS ${BOOST_LIB_DIR} NO_DEFAULT_PATH)
  find_library(BOOST_SYSTEM_DEBUG NAMES libboost_system${BOOST_DEBUG_VERSION}.${STATIC_LIB_SUFFIX} PATHS ${BOOST_LIB_DIR} NO_DEFAULT_PATH)
  find_library(BOOST_SYSTEM_RELEASE NAMES libboost_system${BOOST_RELEASE_VERSION}.${STATIC_LIB_SUFFIX} PATHS ${BOOST_LIB_DIR} NO_DEFAULT_PATH)
  find_library(BOOST_UNITTEST_DEBUG NAMES libboost_unit_test_framework${BOOST_DEBUG_VERSION}.${STATIC_LIB_SUFFIX} PATHS ${BOOST_LIB_DIR} NO_DEFAULT_PATH)
  find_library(BOOST_UNITTEST_RELEASE NAMES libboost_unit_test_framework${BOOST_RELEASE_VERSION}.${STATIC_LIB_SUFFIX} PATHS ${BOOST_LIB_DIR} NO_DEFAULT_PATH)
  include_directories("${BOOST_DIR}")
  # ---------------- HDF5 setup -------------- hdf5.lib hdf5_hl_fortran.lib hdf5_fortran.lib hdf5_f90cstub.lib hdf5_hl.lib 
  if (WIN32)
    set(HDF5_DIR "${DSM2_THIRD_PARTY_DIR}/HDF5-1.8.20-win32")
  else (WIN32)
    #default for when CMake HDF5 download was used to create a HDF5 package
    set(HDF5_DIR "${DSM2_THIRD_PARTY_DIR}/HDF5-1.8.21-Linux/HDF_Group/HDF5/1.8.21")
  endif (WIN32)
  set(HDF5_LIB_PREFIX "lib")
  set(HDF5_LIB_PATH "${HDF5_DIR}/lib")
  set(HDF5_FORTRAN_INCLUDE_PATH "${HDF5_DIR}/include/static")
  include_directories("${HDF5_DIR}/include" "${HDF5_DIR}/include/static")
  find_library(HDF5 NAMES ${HDF5_LIB_PREFIX}hdf5.${STATIC_LIB_SUFFIX} PATHS ${HDF5_LIB_PATH} NO_DEFAULT_PATH)
  find_library(HDF5_HL NAMES ${HDF5_LIB_PREFIX}hdf5_hl.${STATIC_LIB_SUFFIX} PATHS ${HDF5_LIB_PATH} NO_DEFAULT_PATH)
  find_library(HDF5_CPP NAMES ${HDF5_LIB_PREFIX}hdf5_cpp.${STATIC_LIB_SUFFIX} PATHS ${HDF5_LIB_PATH} NO_DEFAULT_PATH)
  find_library(HDF5_HL_CPP NAMES ${HDF5_LIB_PREFIX}hdf5_hl_cpp.${STATIC_LIB_SUFFIX} PATHS ${HDF5_LIB_PATH} NO_DEFAULT_PATH)
  find_library(HDF5_FORTRAN NAMES ${HDF5_LIB_PREFIX}hdf5_fortran.${STATIC_LIB_SUFFIX} PATHS ${HDF5_LIB_PATH} NO_DEFAULT_PATH)
  find_library(HDF5_HL_FORTRAN NAMES ${HDF5_LIB_PREFIX}hdf5_hl_fortran.${STATIC_LIB_SUFFIX} PATHS ${HDF5_LIB_PATH} NO_DEFAULT_PATH)
  find_library(HDF5_F90CSTUB NAMES ${HDF5_LIB_PREFIX}hdf5_f90cstub.${STATIC_LIB_SUFFIX} PATHS ${HDF5_LIB_PATH} NO_DEFAULT_PATH)
  find_library(HDF5_HL_F90CSTUB NAMES ${HDF5_LIB_PREFIX}hdf5_hl_f90cstub.${STATIC_LIB_SUFFIX} PATHS ${HDF5_LIB_PATH} NO_DEFAULT_PATH)
  #szlib.lib zlib.lib 
  find_library(SZLIB NAMES ${HDF5_LIB_PREFIX}szip.${STATIC_LIB_SUFFIX} PATHS "${HDF5_LIB_PATH}" NO_DEFAULT_PATH)
  if (WIN32)
    find_library(ZLIB NAMES ${HDF5_LIB_PREFIX}zlib.${STATIC_LIB_SUFFIX} PATHS "${HDF5_LIB_PATH}" NO_DEFAULT_PATH)
  else (WIN32)
    find_library(ZLIB NAMES ${HDF5_LIB_PREFIX}z.${STATIC_LIB_SUFFIX} PATHS "${HDF5_LIB_PATH}" NO_DEFAULT_PATH)
  endif (WIN32)
  # heclib_vs14_debug.lib 
  if (WIN32)
    set(LIB_PREFIX "")
    set(TOOLSET "_vs14")
    set(STATIC_COMPILE "mt")
    set(DEBUG_COMPILE "d")
  else (WIN32)
    set(LIB_PREFIX "lib")
    set(TOOLSET "_intel")
    set(STATIC_COMPILE "")
    set(DEBUG_COMPILE "d")
  endif (WIN32)
  set(COMPILE_INDICATOR ${STATIC_COMPILE}${DEBUG_COMPILE})
  find_library(HECLIB_DEBUG NAMES ${LIB_PREFIX}heclib${TOOLSET}.${STATIC_LIB_SUFFIX} PATHS "${DSM2_TOP_DIR}/lib" NO_DEFAULT_PATH)
  find_library(HECLIB_RELEASE NAMES ${LIB_PREFIX}heclib${TOOLSET}.${STATIC_LIB_SUFFIX} PATHS "${DSM2_TOP_DIR}/lib" NO_DEFAULT_PATH)
  # oprule_vs14_mtd.lib oprule_parser_vs14_mtd.lib
  find_library(OPRULE_DEBUG NAMES_DEBUG ${LIB_PREFIX}oprule${TOOLSET}${COMPILE_INDICATOR}.${STATIC_LIB_SUFFIX} PATHS "${DSM2_TOP_DIR}/lib" NO_DEFAULT_PATH)
  find_library(OPRULE_PARSER_DEBUG NAMES ${LIB_PREFIX}oprule_parser${TOOLSET}${COMPILE_INDICATOR}.${STATIC_LIB_SUFFIX} PATHS "${DSM2_TOP_DIR}/lib" NO_DEFAULT_PATH)
  find_library(OPRULE_RELEASE NAMES ${LIB_PREFIX}oprule${TOOLSET}${COMPILE_INDICATOR}.${STATIC_LIB_SUFFIX} PATHS "${DSM2_TOP_DIR}/lib" NO_DEFAULT_PATH)
  find_library(OPRULE_PARSER_RELEASE NAMES ${LIB_PREFIX}oprule_parser${TOOLSET}${COMPILE_INDICATOR}.${STATIC_LIB_SUFFIX} PATHS "${DSM2_TOP_DIR}/lib" NO_DEFAULT_PATH)
  # input_storage${TOOLSET}.lib 
  find_library(INPUT_STORAGE_DEBUG ${LIB_PREFIX}input_storage${TOOLSET}${COMPILE_INDICATOR}.${STATIC_LIB_SUFFIX} PATHS "${DSM2_TOP_DIR}/lib" NO_DEFAULT_PATH)
  find_library(INPUT_STORAGE_RELEASE ${LIB_PREFIX}input_storage${TOOLSET}${COMPILE_INDICATOR}.${STATIC_LIB_SUFFIX} PATHS "${DSM2_TOP_DIR}/lib" NO_DEFAULT_PATH)
  # sparse klu library
  if (WIN32)
    find_library(KLULIB_DEBUG ${LIB_PREFIX}KLU.${STATIC_LIB_SUFFIX} PATHS "${DSM2_THIRD_PARTY_DIR}/SuiteSparse/KLU" NO_DEFAULT_PATH)
    find_library(KLULIB_RELEASE ${LIB_PREFIX}KLU.${STATIC_LIB_SUFFIX} PATHS "${DSM2_THIRD_PARTY_DIR}/SuiteSparse/KLU" NO_DEFAULT_PATH)
  else (WIN32)
    find_library(KLULIB_DEBUG ${LIB_PREFIX}klu.${STATIC_LIB_SUFFIX} PATHS "${DSM2_TOP_DIR}/lib" NO_DEFAULT_PATH)
    find_library(KLULIB_RELEASE ${LIB_PREFIX}klu.${STATIC_LIB_SUFFIX} PATHS "${DSM2_TOP_DIR}/lib" NO_DEFAULT_PATH)
  endif (WIN32)
  # mkl libraries
  if (WIN32)
    find_library(MKL_CORE_LIB NAMES mkl_core.lib HINTS "$ENV{IFORT_COMPILER13}/mkl/lib/ia32")
    find_library(MKL_INTEL_LIB NAMES mkl_intel_c.lib HINTS "$ENV{IFORT_COMPILER13}/mkl/lib/ia32")
    #standard libraries. no need to specify path as they are linked from default library paths FIXME: find_package
    set (CMT_LIB_DEBUG "libcmtd.lib")
    set (CMT_LIB_RELEASE "libcmt.lib")
    #math library for Intel Composer 2013 
    set (MMT_LIB "libmmt.lib")
    #math library for Intel VF 16  mkl_intel_c.lib mkl_sequential.lib mkl_core.lib
    set(INTEL_LIB_PATH "C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/mkl/lib/ia32")
    set(MMT_LIB "${INTEL_LIB_PATH}/mkl_intel_c.lib")
    set(MMT_SQ_LIB "${INTEL_LIB_PATH}/mkl_sequential.lib")
    set(MMT_CORE_LIB "${INTEL_LIB_PATH}/mkl_core.lib")
  else (WIN32)
  endif (WIN32)
  
endmacro(FIND_LIBS)
